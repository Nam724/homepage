{"version":3,"sources":["assets/icon.png","assets/font/Happiness-Sans-Bold.ttf","assets/font/Happiness-Sans-Regular.ttf","assets/font/Happiness-Sans-Title.ttf","src/style/style.js","src/screen/main_restaurantList.js","src/models/index.js","src/models/schema.js","src/screen/loading_page.js","src/screen/main.js","src/screen/signup.js","src/screen/signin.js","src/screen/restaurant_auth.js","src/screen/restaurant_guest.js","src/screen/restaurant_finished.js","src/screen/restaurant.js","src/aws-exports.js","App.js","index.js"],"names":["module","exports","height","Dimensions","get","Constants","statusBarHeight","width","colorPack","styles","StyleSheet","create","normalText","fontSize","color","textAlign","highlightText","fontWeight","deactivatedText","container","backgroundColor","flexDirection","paddingTop","header","justifyContent","alignItems","mapContainer","marginBottom","map","restaurantContainer","locationInfoContainer","paddingLeft","paddingRight","restaurantListContainer","restaurantList","marginHorizontal","paddingHorizontal","borderColor","borderWidth","borderRadius","restaurantName","restaurantFee","restaurantMembers","restaurantInfoModal","flex","paddingVertical","restaurantInfoContainerModal","paddingBottom","restaurantPageContainerModal","buttonContainerModal","modalButton","getRestaurantInfoModal","restaurantButtonContainer","restaurantButton_1","restaurantButton_2","goToSignUpInButton","textInputBox","marginVertical","textAlignVertical","textInputBox_restaurant_menu","lineHeight","padding","textInputBox_restaurant_price","map_darkStyle","Main_restaurantList","user","restaurant","num","navigation","place","setRestaurantList","refreshRestaurantList","myBackgroundColor","backgroundColor_odd","backgroundColor_even","Number","isFinishRecruiting","View","style","TouchableOpacity","onPress","navigate","Text","numberOfLines","ellipsizeMode","username","makerID","name","id","num_members","fee","Main_restaurantList_sample","disabled","initSchema","Member","Restaurant","Place","Loading_page","route","alignContent","Image","source","require","marginLeft","ActivityIndicator","size","animating","Main_page","autoLogin","params","JSON","parse","attributes","sub","useState","location","setLocation","isLoading","setIsLoading","errorMsg","useEffect","getLocation","useFocusEffect","React","useCallback","a","async","Alert","alert","text","replace","Location","status_location_permission","console","log","accuracy","Highest","_location","latitude","coords","longitude","latitudeDelta","longitudeDelta","setUser","AsyncStorage","setItem","stringify","refreshing","setRefreshing","getMarkers","loadRestaurant","selectedMarker","key","showUserOrderList","setSelectedMarker","coordinate","title","restaurantList_sample","logOut","Auth","signOut","returnMarker","data","num_restaurants","description","markers","setMarkers","_markerList","DataStore","query","models","forEach","model","index","push","length","newmarkerCoordinate","setNewmarkerCoordinate","dialogVisible_marker","setDialogVisible_marker","dialogVisible_restaurant","setDialogVisible_restaurant","newRestaurant_name","setNewRestaurant_name","newRestaurant_fee","setNewRestaurant_fee","newRestaurant_url","setNewRestaurant_url","address","newRestaurant_account","setNewRestaurant_account","saveNewRestaurant","placeID","save","parseInt","CURRENT_ITEM","copyOf","updated","email","phone_number","q","_restaurantList","sort","b","members","_orderList","member","restaurantID","rest","isDialogVisible","message","dialogStyle","textInputProps","autoCorrect","autoCapitalize","maxLength","submitText","cancelText","submitInput","makeNewMarker","closeDialog","Modal","animationType","transparent","visible","onRequestClose","KeyboardAvoidingView","behavior","keyboardVerticalOffset","opacity","lineBreakMode","split","ScrollView","provider","PROVIDER_GOOGLE","customMapStyle","initialRegion","showsMyLocationButton","showsUserLocation","loadingEnabled","zoomEnabled","rotateEnabled","onLongPress","e","nativeEvent","filter","marker","Linking","TextInput","placeholder","placeholderTextColor","value","onChangeText","readClipboard","showSoftInputOnFocus","editable","keyboardType","onKeyPress","locationInfoButton","onPressOut","SafeAreaView","refreshControl","RefreshControl","onRefresh","innerText","restaurantTitleFormat","restaurantUrlFormat","restaurantTitle","clipboardText","match","restaurantUrl","substring","SignUp_page","setEmail","setIsEmailValid","phoneNumber","setPhoneNumber","password1","setPassword1","password","setPassword","account","setAccount","verification_code","setVerification_code","verification_code_sended","setVerification_code_sended","sendVerificationCodeBtn","setSendVerificationCodeBtn","marginTop","test","emailTest","secureTextEntry","pw","signUp","code","sendVerificationCode","autoComplete","Keyboard","dismiss","confirmSignUp","saveLoginInfo","loginInfo","SignIn_page","isEmailValid","loginFirst","getItem","then","_value","signIn","_user","defaultValue","accessibilityLabel","top","Restaurant_page_auth","setRestaurant","setIsFinishRecruiting","setMember","modalVisible","setModalVisible","menuList","setMenuList","menuPrice","setMenuPrice","isRegistered","setIsRegistered","setFee","getMembers","_membersList","m","_m","Members","menu","join","price","setMembersList","membersList","Math","ceil","multiline","_menuList","CURRENT_Member","CURRENT_RESTAURANT","addMenu","url","_allMenuList","Clipboard","showAllMenu","updatedItem","makeNewMember","numberSMS","stringSMS","SMS","result","sendMoney","restartRecruiting","modelToDelete","delete","goBack","deleteRestaurant","toString","sendSMS","Restaurant_page_guest","_isRegistered","deleteMember","Restaurant_page_finished","deactivated","estaurant","makerPhoneNumber","sendSMSAsync","sendSMStoAuthor","Restaurant_page","awsmobile","Amplify","configure","awsconfig","Stack","createStackNavigator","registerRootComponent","useFonts","NavigationContainer","Navigator","initialRouteName","Screen","component","options","headerShown"],"mappings":"yEAAAA,EAAOC,QAAU,IAA0B,kC,kGCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,yNCG9BC,EAASC,IAAWC,IAAI,UAAUF,OAAOG,IAAUC,gBACnDC,EAAQJ,IAAWC,IAAI,UAAUG,MACjCC,EACO,UADPA,EAEQ,UAFRA,EAGO,UAHPA,EAIE,UAJFA,EAKG,UALHA,EAMI,UAIJC,EAASC,IAAWC,OAAO,CAEpCC,WAAW,CAEPC,SAAe,IAANN,EACTO,MAAON,EACPO,UAAU,UAEdC,cAAc,CAEVH,SAAe,IAANN,EACTO,MAAON,EACPO,UAAU,SACVE,WAAW,QAEfC,gBAAgB,CAEZL,SAAe,IAANN,EACTO,MAAON,EACPO,UAAU,UAGdI,UAAU,CACNZ,MAAOA,EACPL,OAAQC,IAAWC,IAAI,UAAUF,OACjCkB,gBAAgBZ,EAChBa,cAAe,SACfC,WAAYjB,IAAUC,iBAE1BiB,OAAO,CACHrB,OAAiB,IAATA,EAAa,IACrBK,MAAOA,EACPQ,UAAW,SACXS,eAAgB,SAChBC,WAAY,UAEhBC,aAAa,CACTxB,OAAiB,IAATA,EAAa,IACrBK,MAAOA,EACPoB,aAAuB,GAATzB,EAAY,KAE9B0B,IAAI,CACA1B,OAAiB,IAATA,EAAa,IACrBK,MAAOA,GAEXsB,oBAAqB,CACjB3B,OAAiB,IAATA,EAAa,IACrBK,MAAMA,GAGVuB,sBAAsB,CAClB5B,OAAiB,IAATA,EAAa,IACrB6B,YAAqB,GAARxB,EAAW,IACxByB,aAAsB,GAARzB,EAAW,IACzBc,cAAe,MACfI,WAAY,SACZD,eAAgB,iBAEpBS,wBAAwB,CACpB/B,OAAiB,IAATA,EAAa,KAEzBgC,eAAe,CACXhC,OAAiB,IAATA,EAAa,IACrBmB,cAAe,MACfI,WAAY,SACZD,eAAgB,gBAChBW,iBAAwB,GAAN5B,EAAS,IAC3B6B,kBAAyB,GAAN7B,EAAS,IAC5B8B,YAAa7B,EACb8B,YAAa,EACbC,aAAoB,GAANhC,EAAS,KAE3BiC,eAAe,CACXjC,MAAe,IAARA,EAAY,IACnBQ,UAAW,QAEf0B,cAAc,CACVlC,MAAe,IAARA,EAAY,IACnBQ,UAAW,QAEf2B,kBAAkB,GAMlBC,oBAAoB,CAClBC,KAAK,EACLC,gBAAiBxC,IAAUC,gBAC3Bc,gBAAiBZ,GAEnBsC,6BAA6B,CACzB1B,gBAAiBZ,EACjBiB,WAAW,SACXJ,cAAc,SACdG,eAAe,gBACfuB,cAAwB,IAAT7C,EAAa,KAGhC8C,6BAA6B,CAC3B5B,gBAAiBZ,EACjBiB,WAAW,SACXJ,cAAc,SACdG,eAAe,gBACfuB,cAAe,GAGjBE,qBAAqB,CACjB/C,OAAiB,GAATA,EAAY,IACpBmB,cAAc,MACdG,eAAe,gBACfC,WAAW,WAGfyB,YAAY,CACR3C,MAAe,IAARA,EAAY,IACnBL,OAAiB,IAATA,EAAa,IACrBkB,gBAAiBZ,EACjB+B,aAAuB,GAATrC,EAAY,IAC1BsB,eAAe,SACfW,iBAAuB,GAAN5B,EAAS,IAC1BkB,WAAW,UAGf0B,uBAAuB,CACnBjD,OAAiB,IAATA,EAAa,IACrBK,MAAMA,EACNkB,WAAW,UAKf2B,0BAA0B,CACtB/B,cAAc,OAElBgC,mBAAmB,CACf9C,MAAe,IAARA,EACPkB,WAAW,SACXD,eAAe,SACfJ,gBAAiBZ,EAEjBN,OAAiB,IAATA,EAAa,IACrBqC,aAAuB,GAATrC,EAAY,IAC1BmC,YAAa7B,EACb8B,YAAa,EACbX,aAAuB,GAATzB,EAAY,KAE9BoD,mBAAmB,CACf/C,MAAe,IAARA,EACPkB,WAAW,SACXD,eAAe,SACfJ,gBAAiBZ,EAEjBN,OAAiB,IAATA,EAAa,IACrBqC,aAAuB,GAATrC,EAAY,IAC1BmC,YAAa7B,EACb8B,YAAa,EACbX,aAAuB,GAATzB,EAAY,KAI9BqD,mBAAmB,CACfhD,MAAe,IAARA,EAAY,IACnBL,OAAiB,IAATA,EAAa,IACrBkB,gBAAiBZ,EACjB+B,aAAuB,GAATrC,EAAY,IAC1BsB,eAAe,SACfW,iBAA0B,IAAR5B,EAAY,KAElCiD,aAAa,CACTjD,MAAe,IAARA,EAAY,IACnBL,OAAiB,IAATA,EAAa,IACrBqC,aAAuB,GAATrC,EAAY,IAC1BmC,YAAa7B,EACb8B,YAAoB,GAAP/B,EAAU,IACvBkD,eAAyB,GAATvD,EAAY,IAC5BiC,iBAA0B,IAAR5B,EAAY,IAC9BQ,UAAU,SACV2C,kBAAkB,SAClB5C,MAAON,EACP4B,kBAA2B,GAAR7B,EAAW,KAElCoD,6BAA6B,CACzBpD,MAAe,IAARA,EAAY,IAEnBgC,aAAuB,GAATrC,EAAY,IAC1BmC,YAAa7B,EACb8B,YAAoB,GAAP/B,EAAU,IACvBkD,eAAyB,GAATvD,EAAY,IAC5BiC,iBAA0B,GAAR5B,EAAW,IAC7BQ,UAAU,SACV2C,kBAAkB,SAClBE,WAAqB,GAAT1D,EAAY,IACxB2D,QAAc,GAANtD,EAAS,KAErBuD,8BAA8B,CAC1BvD,MAAe,IAARA,EAAY,IACnBL,OAAiB,IAATA,EAAa,IACrBqC,aAAuB,GAATrC,EAAY,IAC1BmC,YAAa7B,EACb8B,YAAoB,GAAP/B,EAAU,IACvBkD,eAAyB,GAATvD,EAAY,IAC5BiC,iBAA0B,GAAR5B,EAAW,IAC7BQ,UAAU,SACV2C,kBAAkB,SAClBG,QAAc,GAANtD,EAAS,OAMZwD,EAAe,CACpB,CACE,YAAe,WACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,mBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,qBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,0BACf,YAAe,mBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,MACf,YAAe,mBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,WACf,YAAe,WACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,WACf,YAAe,mBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,OACf,YAAe,WACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,OACf,YAAe,kBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,OACf,YAAe,mBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,eACf,YAAe,WACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,eACf,YAAe,kBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,eACf,YAAe,mBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,UACf,YAAe,WACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,kBACf,YAAe,mBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,QACf,YAAe,WACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,QACf,YAAe,mBACf,QAAW,CACT,CACE,MAAS,aAIf,CACE,YAAe,QACf,YAAe,qBACf,QAAW,CACT,CACE,MAAS,c,wBC1XvB,SAASC,EAAoBC,EAAMC,EAAYC,EAAKC,EAAYC,EAAOC,EAAmBpC,EAAgBqC,GACxG,IAEIC,EAFEC,EAAsBjE,EACtBkE,EAAuBlE,EAe7B,OAVEgE,EADCG,OAAOR,GAAM,GAAK,EACCO,EAGAD,EAOdP,EAAWU,mBAChB,eAACC,EAAA,EAAD,CAAMC,MAAO,CAACrE,EAAOyB,eAAe,CAACd,gBAAgBoD,IAArD,UAGD,cAACO,EAAA,EAAD,CACAC,QAAW,WAETZ,EAAWa,SAAS,aAAc,CAAChB,KAAKA,EAAMC,WAAWA,EAAYG,MAAMA,KAH7E,SAQE,cAACa,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOS,gBAAiBT,EAAO+B,gBAAiB2C,cAAe,EAAGC,cAAc,OAA9F,SACEnB,EAAKoB,UAAYnB,EAAWoB,QAA5B,IAAwCpB,EAAWqB,KAAnD,IAA2DrB,EAAWqB,SAGxE,cAACL,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAYH,EAAOgC,eAAiB2C,cAAc,OAAOD,cAAe,EAA7F,SAAiG,KAEjG,cAACD,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAYH,EAAOiC,mBAAoB0C,cAAc,OAAOD,cAAe,EAAhG,wCAhBGjB,EAAWsB,IAoBf,eAACX,EAAA,EAAD,CAAMC,MAAO,CAACrE,EAAOyB,eAAe,CAACd,gBAAgBoD,IAArD,UAGD,cAACO,EAAA,EAAD,CACAC,QAAW,WACTZ,EAAWa,SAAS,aAAc,CAAChB,KAAKA,EAAMC,WAAWA,EAAYG,MAAMA,KAF7E,SAME,cAACa,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOO,cAAeP,EAAO+B,gBAAiB2C,cAAe,EAAGC,cAAc,OAA5F,SACEnB,EAAKoB,UAAYnB,EAAWoB,QAA5B,IAAwCpB,EAAWqB,KAAnD,IAA2DrB,EAAWqB,SAGxE,cAACL,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAYH,EAAOgC,eAAiB2C,cAAc,OAAOD,cAAe,EAA7F,SAAyH,GAAxBjB,EAAWuB,YAAX,UAA+BvB,EAAWwB,IAA1C,mBAAsDxB,EAAWwB,IAAIxB,EAAWuB,YAAhF,WAEjG,cAACP,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAYH,EAAOiC,mBAAoB0C,cAAc,OAAOD,cAAe,EAAhG,SAAuGjB,EAAWuB,YAAlH,aAdGvB,EAAWsB,IAoBpB,SAASG,EAA2BH,EAAID,EAAMG,EAAKvB,GACjD,IAEIK,EAFEC,EAAsBjE,EACtBkE,EAAuBlE,EAS7B,OANEgE,EADCG,OAAOR,GAAM,GAAK,EACCO,EAGAD,EAIpB,eAACM,EAAA,EAAD,CAAkBD,MAAO,CAACrE,EAAOyB,eAAe,CAACd,gBAAgBoD,IACjEoB,UAAU,EADV,UAIE,cAACV,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAYH,EAAO+B,gBAAxC,SAA0D+C,IAE1D,cAACL,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOS,gBAAiBT,EAAOgC,eAA7C,YAAiEiD,MANwBF,G,aCtE/F,EAAsCK,YCNhB,CAClB,OAAU,CACN,OAAU,CACN,KAAQ,SACR,OAAU,CACN,GAAM,CACF,KAAQ,KACR,SAAW,EACX,KAAQ,KACR,YAAc,EACd,WAAc,IAElB,SAAY,CACR,KAAQ,WACR,SAAW,EACX,KAAQ,KACR,YAAc,EACd,WAAc,IAElB,MAAS,CACL,KAAQ,QACR,SAAW,EACX,KAAQ,SACR,YAAc,EACd,WAAc,IAElB,KAAQ,CACJ,KAAQ,OACR,SAAW,EACX,KAAQ,SACR,YAAc,EACd,WAAc,GACd,iBAAmB,GAEvB,MAAS,CACL,KAAQ,QACR,SAAW,EACX,KAAQ,MACR,YAAc,EACd,WAAc,IAElB,aAAgB,CACZ,KAAQ,eACR,SAAW,EACX,KAAQ,KACR,YAAc,EACd,WAAc,IAElB,aAAgB,CACZ,KAAQ,eACR,SAAW,EACX,KAAQ,SACR,YAAc,EACd,WAAc,IAElB,UAAa,CACT,KAAQ,YACR,SAAW,EACX,KAAQ,cACR,YAAc,EACd,WAAc,GACd,YAAc,GAElB,UAAa,CACT,KAAQ,YACR,SAAW,EACX,KAAQ,cACR,YAAc,EACd,WAAc,GACd,YAAc,IAGtB,UAAY,EACZ,WAAc,UACd,WAAc,CACV,CACI,KAAQ,QACR,WAAc,IAElB,CACI,KAAQ,MACR,WAAc,CACV,KAAQ,eACR,OAAU,CACN,kBAIZ,CACI,KAAQ,OACR,WAAc,CACV,MAAS,CACL,CACI,MAAS,SACT,WAAc,CACV,SACA,SACA,SACA,cAQ5B,WAAc,CACV,KAAQ,aACR,OAAU,CACN,GAAM,CACF,KAAQ,KACR,SAAW,EACX,KAAQ,KACR,YAAc,EACd,WAAc,IAElB,KAAQ,CACJ,KAAQ,OACR,SAAW,EACX,KAAQ,SACR,YAAc,EACd,WAAc,IAElB,IAAO,CACH,KAAQ,MACR,SAAW,EACX,KAAQ,MACR,YAAc,EACd,WAAc,IAElB,IAAO,CACH,KAAQ,MACR,SAAW,EACX,KAAQ,SACR,YAAc,EACd,WAAc,IAElB,QAAW,CACP,KAAQ,UACR,SAAW,EACX,KAAQ,KACR,YAAc,EACd,WAAc,IAElB,QAAW,CACP,KAAQ,UACR,SAAW,EACX,KAAQ,KACR,YAAc,EACd,WAAc,IAElB,sBAAyB,CACrB,KAAQ,wBACR,SAAW,EACX,KAAQ,CACJ,MAAS,UAEb,YAAc,EACd,WAAc,GACd,iBAAmB,EACnB,YAAe,CACX,eAAkB,WAClB,eAAkB,iBAG1B,YAAe,CACX,KAAQ,cACR,SAAW,EACX,KAAQ,MACR,YAAc,EACd,WAAc,IAElB,QAAW,CACP,KAAQ,UACR,SAAW,EACX,KAAQ,SACR,YAAc,EACd,WAAc,IAElB,mBAAsB,CAClB,KAAQ,qBACR,SAAW,EACX,KAAQ,UACR,YAAc,EACd,WAAc,IAElB,UAAa,CACT,KAAQ,YACR,SAAW,EACX,KAAQ,cACR,YAAc,EACd,WAAc,GACd,YAAc,GAElB,UAAa,CACT,KAAQ,YACR,SAAW,EACX,KAAQ,cACR,YAAc,EACd,WAAc,GACd,YAAc,IAGtB,UAAY,EACZ,WAAc,cACd,WAAc,CACV,CACI,KAAQ,QACR,WAAc,IAElB,CACI,KAAQ,MACR,WAAc,CACV,KAAQ,UACR,OAAU,CACN,aAIZ,CACI,KAAQ,OACR,WAAc,CACV,MAAS,CACL,CACI,MAAS,SACT,WAAc,CACV,SACA,SACA,SACA,cAQ5B,MAAS,CACL,KAAQ,QACR,OAAU,CACN,GAAM,CACF,KAAQ,KACR,SAAW,EACX,KAAQ,KACR,YAAc,EACd,WAAc,IAElB,SAAY,CACR,KAAQ,WACR,SAAW,EACX,KAAQ,QACR,YAAc,EACd,WAAc,IAElB,UAAa,CACT,KAAQ,YACR,SAAW,EACX,KAAQ,QACR,YAAc,EACd,WAAc,IAElB,KAAQ,CACJ,KAAQ,OACR,SAAW,EACX,KAAQ,SACR,YAAc,EACd,WAAc,IAElB,uBAA0B,CACtB,KAAQ,yBACR,SAAW,EACX,KAAQ,CACJ,MAAS,cAEb,YAAc,EACd,WAAc,GACd,iBAAmB,EACnB,YAAe,CACX,eAAkB,WAClB,eAAkB,YAG1B,QAAW,CACP,KAAQ,UACR,SAAW,EACX,KAAQ,KACR,YAAc,EACd,WAAc,IAElB,gBAAmB,CACf,KAAQ,kBACR,SAAW,EACX,KAAQ,MACR,YAAc,EACd,WAAc,IAElB,UAAa,CACT,KAAQ,YACR,SAAW,EACX,KAAQ,cACR,YAAc,EACd,WAAc,GACd,YAAc,GAElB,UAAa,CACT,KAAQ,YACR,SAAW,EACX,KAAQ,cACR,YAAc,EACd,WAAc,GACd,YAAc,IAGtB,UAAY,EACZ,WAAc,SACd,WAAc,CACV,CACI,KAAQ,QACR,WAAc,IAElB,CACI,KAAQ,OACR,WAAc,CACV,MAAS,CACL,CACI,MAAS,SACT,WAAc,CACV,SACA,SACA,SACA,eAShC,MAAS,GACT,UAAa,GACb,QAAW,qCD/UPC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,WAAYC,EAA5B,EAA4BA,M,qDECb,SAASC,EAAT,GAA0C,EAAnBC,MAAmB,EAAZ9B,WAG3C,OACI,eAACS,EAAA,EAAD,CAAMC,MAAO,CAACrE,EAAOU,UAAW,CAACK,eAAe,WAAhD,UAGA,cAACqD,EAAA,EAAD,CAAMC,MAAO,CAACqB,aAAa,SAAU3E,eAAe,UAApD,SACE,cAAC4E,EAAA,EAAD,CAAOC,OAAQC,EAAQ,KAA0BxB,MAAO,CAACvE,MAAY,GAANA,EAAWL,OAAa,GAANK,EAAWgG,WAAiB,GAANhG,OAGzG,cAACsE,EAAA,EAAD,CAAMC,MAAOrE,EAAOc,OAApB,SACA,cAAC2D,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACK,sGAKL,cAACwF,EAAA,EAAD,CAAmBC,KAAK,QAAQC,WAAW,EAAM5F,MAAON,O,sBCN/C,SAASmG,EAAT,GAAwC,IAApBT,EAAmB,EAAnBA,MAAO9B,EAAY,EAAZA,WAGlCwC,EAAYV,EAAMW,OAAOD,UAC3B3C,EAAO6C,KAAKC,MAAMb,EAAMW,OAAO5C,MAAM+C,WACzC/C,EAAKoB,SAAWpB,EAAKgD,IACrB,MAAgCC,mBAAS,MAAzC,WAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,oBAAS,GAA3C,WAAOG,EAAP,KAAkBC,EAAlB,KAIA,EAAgCJ,mBAAS,MAAzC,WAAOK,EAAP,UAKAC,qBAAU,WACRC,MAEA,IAEFC,YACEC,IAAMC,aAAY,WAChBrD,GAAsB,eACrB,KAIL,IAAMkD,EAAc,8BAAAI,EAAAC,OAAA,mDAClBR,GAAa,IACVV,EAFe,gBAGhBmB,IAAMC,MAAM,2BAAQ,+QAA8D,CAChF,CAACC,KAAM,eAAMjD,QAAS,WAEpBZ,EAAW8D,QAAQ,WAClBpD,MAAO,UACV,CAACmD,KAAM,eAAMjD,QAAS,8BAAA6C,EAAAC,OAAA,kEAAAD,EAAA,MACuBM,OADvB,uBACdC,EADc,EACdA,2BACNC,QAAQC,IAAI,oCAAgBF,GAFR,WAAAP,EAAA,MAQEM,IAAiC,CAACI,SAAUJ,IAAkBK,WARhE,OAQhBC,EARgB,OASpBrB,EAAY,CACZsB,SAAUD,EAAUE,OAAOD,SAC3BE,UAAWH,EAAUE,OAAOC,UAC5BC,cAAe,KAAOC,eAAgB,OAEtCxB,GAAa,GAdO,iEARR,yCAAAO,EAAA,MA2B2BM,OA3B3B,uBA2BVC,EA3BU,EA2BVA,2BACNC,QAAQC,IAAI,oCAAgBF,GA5BZ,YAAAP,EAAA,MAkCMM,IAAiC,CAACI,SAAUJ,IAAkBK,WAlCpE,QAkCZC,EAlCY,OAmChBrB,EAAY,CACZsB,SAAUD,EAAUE,OAAOD,SAC3BE,UAAWH,EAAUE,OAAOC,UAC5BC,cAAe,KAAOC,eAAgB,OAEtCxB,GAAa,GAxCG,8DA+CdyB,GAAU,SAAC9E,GACb+E,IAAaC,QAAQ,QAASnC,KAAKoC,UAAUjF,KASjD,GAAoCiD,oBAAS,GAA7C,aAAOiC,GAAP,MAAmBC,GAAnB,MAGM7E,GAAwB,sCAAAsD,EAAAC,OAAA,uDAAOtC,EAAP,+BAAU,UAEtC4D,IAAc,GAFc,WAAAvB,EAAA,MAKtBwB,MALsB,UAMpB,YAAL7D,EANyB,kCAAAqC,EAAA,MAQpByB,GAAeC,GAAeC,MARV,iCAUb,cAAPhE,EAVoB,iBAW1BiE,KACAC,GAAkB,CAChBC,WAAY,GACZC,MAAO,4BACPJ,IAAK,cAfmB,2BAkBb,YAAPhE,EAlBoB,iBAmB1BlB,GAAkBuF,IAClBH,GAAkB,CAChBC,WAAY,GACZC,MAAO,GACPJ,IAAK,aAvBmB,2CAAA3B,EAAA,MA6BpByB,GAAe9D,IA7BK,QAgC5B4D,IAAc,GAhCc,8DAoCxBU,GAAS,WACb/B,IAAMC,MAAM,2BAAO,qDAAa,CAAC,CAACC,KAAM,2BAAQjD,QAAS,oBAAA6C,EAAAC,OAAA,uDAEvDiB,GAAQ,IAF+C,WAAAlB,EAAA,MAGjDkC,IAAKC,WAH4C,OAIvD5F,EAAW8D,QAAQ,UAJoC,8DAMtD,CAACD,KAAM,eAAMjD,QAAS,iBAMvBuC,GAGKJ,GACAL,KAAKoC,UAAU/B,GAIxB,IAAM8C,GAAe,SAACC,GAEpB,IAAIP,EAAa,CAACf,UAAWsB,EAAKtB,UAAWF,SAAUwB,EAAKxB,UACxDkB,EAAQM,EAAK3E,KACbiE,EAAMU,EAAK1E,GACX2E,EAAkBD,EAAKC,gBAE3B,OACE,cAAC,SAAD,CACER,WAAYA,EACZC,MAAOA,EACPQ,YAAgBD,EAAL,kCAEXnF,QAAS,WAEP0E,GACE,CACEC,WAAYA,EACZC,MAAOA,EACPJ,IAAKA,IAGTF,GAAeE,KAVZA,IAkBX,GAA8BtC,mBAAS,IAAvC,aAAOmD,GAAP,MAAgBC,GAAhB,MAEA,SAAejB,KAAf,iBAAAxB,EAAAC,OAAA,uDACMyC,EAAc,GADpB,oBAAA1C,EAAA,MAIyB2C,IAAUC,MAAMzE,GAAO,SAAA3B,QAJhD,QAIUqG,EAJV,QAOWC,SAAQ,SAACC,EAAOC,GAErBN,EAAYO,KAAKb,GAAaW,IAE3BC,GAASH,EAAOK,OAAO,GACxBT,GAAWC,MAZnB,+IAyBA,OAAsDrD,mBAAS,MAA/D,aAAO8D,GAAP,MAA4BC,GAA5B,MAqBA,OAA4C/D,mBAAS,CACnDyC,WAAY,GACZC,MAAO,GACPJ,IAAK,aAHP,aAAOD,GAAP,MAAuBG,GAAvB,MAOA,GAAwDxC,oBAAS,GAAjE,aAAOgE,GAAP,MAA6BC,GAA7B,MAMItB,GAAwB,CAC5BlE,EAA2B,eAAe,4BAAS,+CAAa,KAChEA,EAA2B,eAAe,4BAAS,4BAAS,MAG5D,GAA4CuB,mBAAS2C,IAArD,aAAO3H,GAAP,MAAuBoC,GAAvB,MAIA,GAAgE4C,oBAAS,GAAzE,aAAOkE,GAAP,MAAiCC,GAAjC,MAGA,GAAoDnE,mBAAS,MAA7D,aAAOoE,GAAP,MAA2BC,GAA3B,MACA,GAAkDrE,mBAAS,GAA3D,aAAOsE,GAAP,MAA0BC,GAA1B,MACA,GAAkDvE,mBAAS,MAA3D,aAAOwE,GAAP,MAA0BC,GAA1B,MACA,GAA0DzE,mBAASjD,EAAK2H,SAAxE,aAAOC,GAAP,MAA8BC,GAA9B,MAGA,SAAeC,GAAkBC,GAAjC,mBAAAnE,EAAAC,OAAA,kEAAAD,EAAA,MAI2B2C,IAAUyB,KACjC,IAAIlG,EAAW,CACf,KAAQuF,GACR,IAA2B,MAAnBE,GAAyB,EAAEU,SAASV,IAC5C,IAAOE,GACP,QAAWM,EACX,QAAW/H,EAAKoB,SAChB,YAAc,EACd,QAAWwG,GACX,oBAAsB,MAb1B,cAIQ3H,EAJR,OAeEqH,GAAsB,MACtBE,GAAqB,MACrBE,GAAqB,MAjBvB,WAAA9D,EAAA,MAoB6B2C,IAAUC,MAAMzE,EAAOgG,IApBpD,cAoBQG,EApBR,mBAAAtE,EAAA,MAqBsB2C,IAAUyB,KAAKjG,EAAMoG,OAAOD,GAAc,SAAAE,GAE5DA,EAAQlC,gBAAkBkC,EAAQlC,gBAAkB,OAvBxD,eAqBQ9F,EArBR,mBAAAwD,EAAA,MA2BQ2C,IAAUyB,KACd,IAAInG,EAAO,CACP,SAAY7B,EAAKoB,SACjB,MAASpB,EAAKqI,MACd,aAAgBrI,EAAKsI,aACrB,KAAQ,CAAC,2DACT,IAAM5H,OAAO,GACb,aAAgBT,EAAWsB,OAlCnC,QAsCEpB,EAAWa,SAAS,aAAc,CAAChB,KAAKA,EAAMC,WAAWA,EAAYG,MAAMA,IAtC7E,6DA2CA,SAAeiF,GAAe0C,GAA9B,mBAAAnE,EAAAC,OAAA,kEAAAD,EAAA,MAEsB2C,IAAUC,MAAMzE,EAAOgG,IAF7C,cAEQ3H,EAFR,kBAAAwD,EAAA,MAIuB2C,IAAUC,MAAM1E,GAAY,SAACyG,GAAD,OAAOA,EAAER,QAAQ,KAAKA,OAJzE,OAIQtB,EAJR,OAQM+B,EAAkB,GAEtB/B,EAAOgC,MAAK,SAAC7E,EAAE8E,GAGb,OAFe9E,EAAEnC,IAAImC,EAAEpC,YACRkH,EAAEjH,IAAIiH,EAAElH,eAEtBkF,SAAS,SAAMC,EAAOC,GAAb,SAAAhD,EAAAC,OAAA,gDAEV2E,EAAgB3B,KACd9G,EACEC,EACA2G,EACAC,EACAzG,EACAC,IARM,+DAcZC,GAAkBmI,GA5BpB,4DA+BA,IAAMhD,GAAoB,4BAAA5B,EAAAC,OAAA,kEAAAD,EAAA,MACF2C,IAAUC,MAAM3E,GAAQ,SAAC0G,GAAD,OAAOA,EAAEnH,SAAS,KAAKpB,EAAKoB,cADlD,OAClBuH,EADkB,OAGpBC,EAAa,GACdD,EACDA,EAAQjC,SAAS,SAAMmC,EAAQjC,GAAd,iBAAAhD,EAAAC,OAAA,kEAAAD,EAAA,MAEE2C,IAAUC,MAAM1E,EAAY+G,EAAOC,eAFrC,cAEXC,EAFW,kBAAAnF,EAAA,MAGG2C,IAAUC,MAAMzE,EAAOgH,EAAKhB,UAH/B,OAGX3H,EAHW,OAQfwI,EAAW/B,KAAK9G,EACdC,EACA+I,EACAnC,EACAzG,EACAC,IAKCwG,GAAS+B,EAAQ7B,OAAO,IACzBrB,GAAkB,CAChBC,WAAY,GACZC,MAAO,4BACPJ,IAAK,cAEPlF,GAAkBuI,IAxBL,gEA8BjBnD,GAAkB,CAChBC,WAAY,GACZC,MAAO,GACPJ,IAAK,aAEPlF,GAAkBuF,KAxCI,6DA8C1B,OACGxC,EACD,cAACpB,EAAD,IAEA,eAACpB,EAAA,EAAD,CAAMC,MAAOrE,EAAOU,UAApB,UAEE,cAAC,IAAD,CACE8L,gBAAiB/B,GACjBtB,MAAO,qDACPsD,QAAS,8EACTC,YAAa,CACX5K,aAAoB,GAANhC,EAAS,IACvBa,gBAAiBZ,EACjBqD,QAAe,GAANtD,EAAS,KAEpB6M,eAAgB,CACdC,aAAa,EACbC,gBAAgB,EAChBC,UAAW,IAGbC,WAAY,eACZC,WAAY,eACZC,YAAa,SAAC9D,GACTA,IAjMX,SAA6BD,EAAYC,GAAzC,EAAA/B,EAAAC,OAAA,kEAAAD,EAAA,MAEQ2C,IAAUyB,KACd,IAAIjG,EAAM,CACV,SAAY2D,EAAWjB,SACvB,UAAaiB,EAAWf,UACxB,KAAQgB,EACR,uBAA0B,GAC1B,QAAW3F,EAAKoB,SAChB,gBAAkB,MATtB,OAaEd,KAbF,4DAkMQoJ,CAAc3C,GAAqBpB,GACnCuB,IAAwB,IAGtBA,IAAwB,IAG5ByC,YAAa,WACXzC,IAAwB,MAM5B,cAAC0C,EAAA,EAAD,CAAOC,cAAc,OACrBC,aAAa,EACbC,QAAS5C,GACT6C,eAAgB,WACd5C,IAA4B,GAC5BI,GAAqB,MACrBF,GAAsB,MACtBI,GAAqB,OAPvB,SAWA,eAACuC,EAAA,EAAD,CAAsBC,SAAS,UAAUC,uBAA+B,GAAPlO,EAAU,IAC3E4E,MAAOrE,EAAOkC,oBADd,UAEA,eAACkC,EAAA,EAAD,CAAMC,MAAO,CAACrE,EAAOc,OAAQ,CAACF,cAAc,MAAOG,eAAe,gBAAiB6M,QAAQ,KAA3F,UAEA,cAACxJ,EAAA,EAAD,CAAMC,MAAO,CAACvE,MAAY,IAANA,GAApB,SACE,cAACwE,EAAA,EAAD,CACEC,QAAS,WACP8E,MAEFlE,UAAY,EAJd,SAMA,cAACV,EAAA,EAAD,CAAMJ,MAAOrE,EAAOG,WAAY0N,cAAc,OAAOnJ,cAAe,EAApE,SAAwElB,EAAKqI,MAAMiC,MAAM,KAAK,SAIhG,cAACxJ,EAAA,EAAD,CAAkBD,MAAO,CAACvE,MAAY,IAANA,GAC5ByE,QAAS,oBAAA6C,EAAAC,OAAA,kEAAAD,EAAA,MACDwB,MADC,OAEPK,GAAkB,CAChBC,WAAY,GACZC,MAAO,GACPJ,IAAK,aAEPlF,GAAkBuF,IAPX,6DASTjE,UAAY,EAVhB,SAYE,cAACV,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAAesN,cAAc,OAAOnJ,cAAe,EAAvE,SAA2E,+BAG7E,cAACN,EAAA,EAAD,CAAMC,MAAO,CAACvE,MAAY,IAANA,GAApB,SACE,cAACwE,EAAA,EAAD,CACEC,QAAS,WACPyE,MAEF7D,UAAY,EAJd,SAMA,cAACV,EAAA,EAAD,CAAMJ,MAAOrE,EAAOG,WAAY0N,cAAc,OAAOnJ,cAAe,EAApE,8CAMJ,cAACN,EAAA,EAAD,CAAMC,MAAOrE,EAAOc,OAApB,SACA,cAAC2D,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOO,eAArB,sCAAgDuI,GAAeK,MAA/D,8CAIA,eAAC4E,EAAA,EAAD,WACA,cAAC3J,EAAA,EAAD,CAAMC,MAAO,CAACrE,EAAOiB,aAAa,CAACxB,OAAO,IAAIA,EAAO,MAArD,SAEA,cAAC,IAAD,CACAuO,SAAUC,kBACVC,eAAgB5K,EAChBe,MAAO,CAACrE,EAAOmB,IAAK,CAAC1B,OAAO,IAAIA,EAAO,MACvC0O,cAAezH,EACf0H,uBAAuB,EACvBC,mBAAmB,EACnBC,gBAAgB,EAChBC,aAAa,EACbC,eAAe,EACfC,YAAa,SAACC,GACZlE,GAAuBkE,EAAEC,YAAYzF,YACrCwB,IAAwB,IAZ1B,SAeCd,GAAQgF,QAAO,SAACC,GAAD,OAAYA,EAAO9F,MAAQD,GAAeC,WAMtD,eAAC3E,EAAA,EAAD,CAAMC,MAAOrE,EAAOqC,6BAApB,UAGE,eAAC+B,EAAA,EAAD,CAAMC,MAAOrE,EAAO0C,uBAApB,UACA,cAAC4B,EAAA,EAAD,CACEC,QAAS,WACPuK,IAAgB,+CAElB3J,SAA+B,MAArB8F,GAJZ,SAOA,cAACxG,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,YAArB,SAAmC8K,GAAkB,+CAAY,2EAG/D,cAAC8D,EAAA,EAAD,CACA1K,MAAOrE,EAAO+C,aACdiM,YAAa,+DACbC,qBAAsBlP,EACtBmP,MAAOjE,GACPkE,aAAc,SAAC3H,GAAD,OAAU4H,GAActE,GAAuBI,GAAsB1D,SAKrF,eAACpD,EAAA,EAAD,CAAMC,MAAOrE,EAAO0C,uBAApB,UACE,cAAC+B,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,YAArB,SAAmC,oCACnC,cAAC4O,EAAA,EAAD,CAAW1K,MAAOrE,EAAO+C,aACzBmM,MAAOrE,GACPsE,aAAc,SAAC3H,GAAD,OACZsD,GAAsBtD,IAExBwH,YAAY,oGACZC,qBAAsBlP,EACtBsP,sBAAsB,EACtBC,UAAU,OAIZ,eAAClL,EAAA,EAAD,CAAMC,MAAOrE,EAAO0C,uBAApB,UACE,cAAC+B,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,YAArB,SAAmC,+BACnC,cAAC4O,EAAA,EAAD,CAAW1K,MAAOrE,EAAO+C,aACzBoM,aAAc,SAAC3H,GAAD,OAAUwD,GAAqBxD,IAC7C+H,aAAa,UACbP,YAAY,IACZC,qBAAsBlP,OAKxB,eAACqE,EAAA,EAAD,CAAMC,MAAOrE,EAAO0C,uBAApB,UACE,cAAC4B,EAAA,EAAD,CACAC,QAAS,WACP+C,IAAMC,MAAM,2BAAO,qPAErBpC,SAAmC,MAAzBiG,GAJV,SAMA,cAAC3G,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAW,CAACG,UAAU,WAA3C,SAAwD8K,GAAsB,qDAAa,yHAE3F,cAAC2D,EAAA,EAAD,CAAW1K,MAAOrE,EAAO+C,aACzBoM,aAAc,SAAC3H,GAAD,OAAU6D,GAAyB7D,IACjDwH,YAAcxL,EAAK2H,QACnB8D,qBAAsBlP,EACtBuP,SAAmC,MAAzBlE,GACVoE,WAAY,SAACd,GACX,GAA0B,WAAtBA,EAAEC,YAAY5F,IAAkB,CAClC,IAAIwC,EAAUzC,GAAeC,IAC7B6B,IAA4B,GAC5BU,GAAkBC,UAOxB,eAACnH,EAAA,EAAD,CAAMC,MAAOrE,EAAOwC,qBAApB,UACE,cAAC8B,EAAA,EAAD,CACED,MAAOrE,EAAOyC,YACd8B,QAAS,WACLqG,IAA4B,GAC5BI,GAAqB,MACrBF,GAAsB,MACtBI,GAAqB,OAN3B,SAQE,cAACzG,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SAAoC,mBAGtC,cAAC+D,EAAA,EAAD,CACED,MAAOrE,EAAOyC,YACd8B,QAAS,WAEL,IAAIgH,EAAUzC,GAAeC,IAC7B6B,IAA4B,GAC5BU,GAAkBC,IANxB,SAQE,cAAC9G,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SAAoC,6CAa5C,eAAC6D,EAAA,EAAD,CAAMC,MAAO,CAACrE,EAAOc,OAAQ,CAACF,cAAc,MAAOG,eAAe,kBAAlE,UAEE,cAACqD,EAAA,EAAD,CAAMC,MAAO,CAACvE,MAAY,IAANA,GAApB,SACE,cAACwE,EAAA,EAAD,CACEC,QAAS,WACP8E,MAFJ,SAKA,cAAC5E,EAAA,EAAD,CAAMJ,MAAOrE,EAAOG,WAAY0N,cAAc,OAAOnJ,cAAe,EAApE,SAAwElB,EAAKqI,MAAMiC,MAAM,KAAK,SAIhG,cAACxJ,EAAA,EAAD,CAAkBD,MAAO,CAACvE,MAAY,IAANA,GAC5ByE,QAAS,oBAAA6C,EAAAC,OAAA,kEAAAD,EAAA,MACDwB,MADC,OAEPK,GAAkB,CAChBC,WAAY,GACZC,MAAO,GACPJ,IAAK,aAEPlF,GAAkBuF,IAPX,6DADb,SAWE,cAAC3E,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAAesN,cAAc,OAAOnJ,cAAe,EAAvE,SAA2E,+BAG7E,cAACN,EAAA,EAAD,CAAMC,MAAO,CAACvE,MAAY,IAANA,GAApB,SACE,cAACwE,EAAA,EAAD,CACEC,QAAS,WACPyE,MAFJ,SAKA,cAACvE,EAAA,EAAD,CAAMJ,MAAOrE,EAAOG,WAAY0N,cAAc,OAAOnJ,cAAe,EAApE,8CAOJ,cAACN,EAAA,EAAD,CAAMC,MAAOrE,EAAOiB,aAApB,SAEI,cAAC,IAAD,CACA+M,SAAUC,kBACVC,eAAgB5K,EAChBe,MAAOrE,EAAOmB,IACdgN,cAAezH,EACf0H,uBAAuB,EACvBC,mBAAmB,EACnBC,gBAAgB,EAChBC,aAAa,EACbC,eAAe,EACfC,YAAa,SAACC,GACZlE,GAAuBkE,EAAEC,YAAYzF,YACrCwB,IAAwB,IAZ1B,SAeCd,OAML,eAACxF,EAAA,EAAD,CAAMC,MAAOrE,EAAOoB,oBAApB,UAGI,eAACgD,EAAA,EAAD,CAAMC,MAAOrE,EAAOqB,sBAApB,UACI,cAACoD,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACGuI,GAAeK,QAElB,cAAC7E,EAAA,EAAD,CACED,MAAOrE,EAAOyP,mBACdC,WAAY,WACT9E,IAA4B,IAE/BzF,SAA+B,aAArB2D,GAAeC,KAAuC,cAArBD,GAAeC,IAL5D,SAOE,cAACtE,EAAA,EAAD,CAAMJ,MAAOrE,EAAOG,WAApB,SACsB,aAArB2I,GAAeC,IAAiB,iEAAsC,cAAtBD,GAAeC,IAAmB,GAAG,iGAM5F,cAAC4G,EAAA,EAAD,UACA,cAAC5B,EAAA,EAAD,CAAY1J,MAAOrE,EAAOwB,wBAC1BoO,eACE,cAACC,EAAA,EAAD,CACEnH,WAAYA,GACZoH,UAAW,WACe,aAArBhH,GAAeC,IAChBjF,GAAsB,aAEK,YAArBgF,GAAeC,IACrBlF,GAAkBuF,IAGlBtF,GAAsB,cAZ9B,SAqBGrC,aAab,IAAM2N,GAAgB,SAAOtE,EAAuBI,GAA9B,qCAAA9D,EAAAC,OAAA,gDAAoD0I,EAApD,+BAA8D,GAOhE,0JAEZC,EAAwB,UACxBC,EAAsB,iCAEtBC,GATAC,EAAgBJ,GASgBK,MAAMJ,GACtCK,EAAgBF,EAAcC,MAAMH,GAGvCC,GAAiBG,GAElBnF,EAAqBmF,EAAc,IACnCvF,EAAsBoF,EAAgB,GAAGI,UAAU,EAAGJ,EAAgB,GAAG5F,OAAO,MAG9EY,EAAqB,IACrBJ,EAAsB,IACnBqF,EACC7I,IAAMC,MAAM,2BAAZ,iIAAkD,CAAC,CAACC,KAAM,kBAG1DF,IAAMC,MAAM,2BAAO,8GAAyB,CAAC,CAACC,KAAM,mBA5BxC,6D,UCprBP,SAAS+I,GAAT,GAAmC,IAAb5M,EAAY,EAAZA,WACjC,EAA0B8C,mBAAS,IAAnC,WAAOoF,EAAP,KAAc2E,EAAd,KACA,EAAwC/J,oBAAS,GAAjD,WAAqBgK,GAArB,WACA,EAAuChK,mBAAS,IAAhD,WAAOiK,EAAP,KAAqBC,EAArB,KACA,EAAkClK,mBAAS,IAA3C,WAAOmK,EAAP,KAAkBC,EAAlB,KACA,EAAgCpK,mBAAS,IAAzC,WAAOqK,EAAP,KAAiBC,EAAjB,KACA,EAA8BtK,mBAAS,IAAvC,WAAOuK,EAAP,KAAgBC,EAAhB,KACA,EAAkDxK,mBAAS,IAA3D,WAAOyK,EAAP,KAA0BC,EAA1B,KACA,EAAgE1K,oBAAS,GAAzE,WAAO2K,EAAP,KAAiCC,EAAjC,KAEA,EAA8D5K,oBAAS,GAAvE,WAAO6K,EAAP,KAAgCC,EAAhC,KAEAxK,qBAAU,WAMFwK,IAFAH,IAA6BN,IAAYjF,MAO/C,CAACuF,EAA0BN,EAAUjF,IAyDvC,OACI,eAACzH,EAAA,EAAD,CAAMC,MAAOrE,EAAOU,UAApB,UACI,cAAC0D,EAAA,EAAD,CAAMC,MAAOrE,EAAOc,OAApB,SACI,cAAC2D,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACK,wDAIT,cAACkN,EAAA,EAAD,CAAsBC,SAAS,UAAUC,uBAA+B,GAAPlO,EAAU,IAC3E4E,MAAO,CAAClC,KAAK,GADb,SAGA,cAAC4L,EAAA,EAAD,UACA,eAAC3J,EAAA,EAAD,WAGA,eAACA,EAAA,EAAD,CAAMC,MAAO,CAACmN,UAAiB,GAAP/R,EAAU,IAAMA,OAAc,IAAPA,EAAW,KAA1D,UACI,cAACgF,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACC,2CAED,cAACwO,EAAA,EAAD,CACIQ,aAAa,gBACblL,MAAO,CAACrE,EAAO+C,aAAc/C,EAAOG,YACpCgP,aAAc,SAACtD,GACX4E,EAnHxB,SAAmBD,EAAU3E,GAEzB,OAAwB,IADZ,gDACJ4F,KAAK5F,KACT2E,EAAS3E,IACF,GA+GyB6F,CAAUlB,EAAU3E,UAIhD,eAACzH,EAAA,EAAD,CAAMC,MAAO,CAACmN,UAAiB,GAAP/R,EAAU,IAAMA,OAAc,IAAPA,EAAW,KAA1D,UACI,cAACgF,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACC,6BAED,cAACwO,EAAA,EAAD,CACIQ,aAAa,YACblL,MAAO,CAACrE,EAAO+C,aAAc/C,EAAOG,YACpCgP,aAAc,SAACzL,GACXiN,EAAejN,IAEnBuL,qBAAsBlP,EACtBiP,YAAa,mBAIrB,eAAC5K,EAAA,EAAD,CAAMC,MAAO,CAACmN,UAAkB,GAAP/R,EAAU,IAAKA,OAAc,IAAPA,EAAW,KAA1D,UACI,cAACgF,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,sCAGA,cAACwO,EAAA,EAAD,CACI4C,iBAAiB,EACjBpC,aAAa,UACblL,MAAO,CAACrE,EAAO+C,aAAc/C,EAAOG,YACpC2M,UAAW,GACXqC,aAAc,SAACyC,GACK,6CACLH,KAAKG,GACRf,EAAae,GAGbf,EAAa,UAOjC,eAACzM,EAAA,EAAD,CAAMC,MAAO,CAACmN,UAAkB,GAAP/R,EAAU,IAAKA,OAAQmR,EAAkB,IAAPnR,EAAW,IAAK,GAA3E,UACI,cAACgF,EAAA,EAAD,CAAMJ,MAAQyM,IAAWF,EAAW5Q,EAAOO,cAAcP,EAAOS,gBAAhE,SACEqQ,IAAWF,EAAW,wCAAU,gDAElC,cAAC7B,EAAA,EAAD,CACI4C,iBAAiB,EACjBpC,aAAa,UACblL,MAAQuM,EAAW,CAAC5Q,EAAO+C,aAAc/C,EAAOG,YAAY,CAACV,OAAO,GACpEqN,UAAW,GACXqC,aAAc,SAACyC,GAEPb,EADDa,IAAOhB,EACMgB,EAGA,KAGpBtC,WAAWsB,OAInB,eAACxM,EAAA,EAAD,CAAMC,MAAO,CAACmN,UAAiB,GAAP/R,EAAU,IAAMA,OAAc,IAAPA,EAAW,KAA1D,UACA,cAAC6E,EAAA,EAAD,CACQC,QAAS,WACL+C,IAAMC,MAAM,2BAAO,qPAF/B,SAKI,cAAC9C,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACEyQ,EAAiD,2BAAzC,mMAId,cAACjC,EAAA,EAAD,CACIQ,aAAa,UACblL,MAAO,CAACrE,EAAO+C,aAAc/C,EAAOG,YACpCgP,aAAc,SAAC6B,GACXC,EAAWD,IAEftM,cAAgBsM,EAAS,EAAE,EAC3B1B,UAAU,EACVL,qBAAsBlP,EACtBiP,YAAa,0HAMjB,eAAC5K,EAAA,EAAD,WAEI,cAACE,EAAA,EAAD,CACAoL,WAAY,kBAxKI,0BAAAtI,EAAAC,OAAA,2EAAAD,EAAA,MAGGkC,IAAKuI,OAAO,CAC/BjN,SAAUiH,EACViF,SAAUA,EACVvK,WAAY,CACRsF,MAAMA,EACNC,aAAa,MAAM4E,EAAYJ,UAAU,GAEzCnF,QAAQ6F,MAVI,kBAGZxN,KAWR6N,GAA4B,GAdR,mDAiBF,4BAAf,KAAMS,KAjBW,wBAkBhBxK,IAAMC,MAAM,2BAAO,8EAAkB,CAAC,CAACC,KAAK,kBAlB5B,mBAmBT,GAnBS,WAqBG,8BAAf,KAAMsK,KArBM,wBAsBhBxK,IAAMC,MAAM,2BAAO,2DAAc,CAAC,CAACC,KAAK,kBAtBxB,mBAuBT,GAvBS,WAyBI,iBAAf,KAAMsK,KAzBK,wBA0BhBxK,IAAMC,MAAM,2BAAO,2DAAc,CAAC,CAACC,KAAK,kBA1BxB,mBA2BT,GA3BS,gEAwKEuK,IAClB5M,UAAWmM,EACXjN,MAAO,CAACrE,EAAO8C,mBAAoB,CAAC0O,UAAiB,IAAP/R,EAAW,MAHzD,SAKA,cAACgF,EAAA,EAAD,CAAMJ,MAAOiN,EAAwBtR,EAAOO,cAAcP,EAAOS,gBAAjE,SACE2Q,EAAyC,gEAAhB,sEAG3B,cAACrC,EAAA,EAAD,CACIiD,aAAa,MACbzC,aAAa,aACblL,MAAO,CAACrE,EAAO+C,aAAc/C,EAAOG,YACpC2M,UAAW,EACXqC,aAAc,SAAC+B,GAAuBC,EAAqBD,GAClB,IAA7BA,EAAkB5G,QAClB2H,KAASC,WAIrB5C,SAAU8B,OAGlB,cAAC9M,EAAA,EAAD,CACAoL,WAAY,kBA/JE,EAAAtI,EAAAC,OAAA,2EAAAD,EAAA,MAEVkC,IAAK6I,cAActG,EAAOqF,IAFhB,cAGhB5J,IAAMC,MAAM,2BAAO,6EAAiB,CAAC,CAACC,KAAK,kBAC3C7D,EAAWa,SAAS,UAJJ,mBAKT,GALS,mCAQA,iBAAV,KARU,wBASV8C,IAAMC,MAAM,2BAAO,2DAAc,CAAC,CAACC,KAAK,kBAT9B,mBAUH,GAVG,WAYK,0BAAV,KAZK,wBAaVF,IAAMC,MAAM,2BAAO,wEAAiB,CAAC,CAACC,KAAK,kBAbjC,mBAcH,GAdG,iEAiKdrC,UAAW+L,EACX7M,MAAO,CAACrE,EAAO8C,oBAJf,SAMA,cAAC2B,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACC,yCC9Pb,SAAe6R,KAAf,+BAAAhL,EAAAC,OAAA,uDAA6BwE,EAA7B,+BAAmC,GAAIiF,EAAvC,+BAAgD,GACtCuB,EAAY,CACdxG,MAAOA,EACPiF,SAAUA,GAHlB,WAAA1J,EAAA,MAKUmB,IAAaC,QAAQ,kBAAmBnC,KAAKoC,UAAU4J,KALjE,4DAUe,SAASC,GAAT,GAAyC,EAAnB7M,MAAoB,IAAb9B,EAAY,EAAZA,WAGxC,EAAkC8C,oBAAS,GAA3C,WAAON,EAAP,KAEA,GAFA,KAE0BM,mBAAS,KAAnC,WAAOoF,EAAP,KAAc2E,EAAd,KACA,EAAwC/J,oBAAS,GAAjD,WAAO8L,EAAP,KAAqB9B,EAArB,KACA,EAAgChK,mBAAS,IAAzC,WAAOqK,EAAP,KAAiBC,EAAjB,KAEAhK,qBAAU,WAEHZ,GAECqM,MAKL,IAEH,IAAMlK,EAAU,SAAC9E,GACb+E,IAAaC,QAAQ,QAASnC,KAAKoC,UAAUjF,KAQ3CgP,EAAa,0BAAApL,EAAAC,OAAA,uDACf6H,EAAQ,KADO,oBAAA9H,EAAA,MAGTmB,IAAakK,QAAQ,mBAAmBC,MAAK,SAAAC,IAC/CzD,EAAQ7I,KAAKC,MAAMqM,IAEV9G,OAASqD,EAAM4B,WAEpBN,EAAStB,EAAMrD,OACfkF,EAAY7B,EAAM4B,UAClB8B,EAAO1D,EAAMrD,MAAOqD,EAAM4B,eAVnB,sDAkBX5B,EAAQ,KAlBG,gEAuBb0D,EAAS,0CAAAxL,EAAAC,OAAA,uDAAMwE,EAAN,+BAAcA,EAAOiF,EAArB,+BAAgCA,EAAhC,oBAAA1J,EAAA,MAEakC,IAAKsJ,OAAO/G,EAAOiF,IAFhC,OAED+B,EAFC,OAIPvK,EAAQuK,GACRT,GAAcvG,EAAOiF,GACrBnN,EAAW8D,QAAQ,OAAQ,CACvBjE,KAAM6C,KAAKoC,UAAUoK,GACrB1M,UAAWA,IARR,qDAYM,8BAAV,KAZI,wBAaHmB,IAAMC,MAAM,2BAAO,8EAAmB,CAAC,CAACC,KAAM,eAAMjD,QAAS,gBAb1D,mBAcI,GAdJ,WAgBU,+CAAT,KAhBD,wBAiBH+C,IAAMC,MAAM,2BAAO,8EAAmB,CAAC,CAACC,KAAM,eAAMjD,QAAS,gBAjB1D,mBAkBI,GAlBJ,WAoBU,2DAAT,KApBD,wBAqBH+C,IAAMC,MAAM,2BAAO,oFAAoB,CAAC,CAACC,KAAM,eAAMjD,QAAS,gBArB3D,mBAsBI,GAtBJ,WAwBW,gBAAT,KAxBF,wBAyBH+C,IAAMC,MAAM,2BAAO,2DAAe,CAAC,CAACC,KAAM,eAAMjD,QAAS,gBAzBtD,mBA0BI,GA1BJ,WA4BW,8FAAT,KA5BF,wBA6BH+C,IAAMC,MAAM,2BAAO,qDAAc,CAAC,CAACC,KAAM,eAAMjD,QAAS,gBA7BrD,mBA8BI,GA9BJ,WAgCW,iEAAT,KAhCF,wBAkCH+C,IAAMC,MAAM,2BAAO,2DAAe,CAAC,CAACC,KAAM,eAAMjD,QAAS,gBAlCtD,mBAmCI,GAnCJ,eAsCH+C,IAAMC,MAAM,2BAAO,qDAAc,CAAC,CAACC,KAAM,eAAMjD,QAAS,gBAtCrD,mBAuCI,GAvCJ,kEA8Cf,OACI,eAACH,EAAA,EAAD,CAAMC,MAAOrE,EAAOU,UAApB,UACI,cAAC0D,EAAA,EAAD,CAAMC,MAAO,CAACqB,aAAa,UAA3B,SACA,cAACC,EAAA,EAAD,CAAOC,OAAQC,EAAQ,KAA0BxB,MAAO,CAACvE,MAAY,GAANA,EAAWL,OAAa,GAANK,EAAWgG,WAAiB,IAANhG,OAEvG,cAACsE,EAAA,EAAD,CAAMC,MAAOrE,EAAOc,OAApB,SACI,cAAC2D,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACK,kDAIT,cAACkN,EAAA,EAAD,CAAsBC,SAAS,UAAUC,uBAA+B,GAAPlO,EAAU,IAC3E4E,MAAO,CAAClC,KAAK,GADb,SAEA,cAAC4L,EAAA,EAAD,UACI,eAAC3J,EAAA,EAAD,WACI,eAACA,EAAA,EAAD,CAAMC,MAAO,CAACmN,UAAiB,IAAP/R,EAAW,IAAMA,OAAc,IAAPA,EAAW,KAA3D,UACI,cAACgF,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACK,uBAEL,cAACwO,EAAA,EAAD,CACIiD,aAAa,QACbzC,aAAa,gBACblL,MAAO,CAACrE,EAAO+C,aAAc/C,EAAOG,YACpCgP,aAAc,SAACtD,GACX2E,EAAS3E,GACT4E,EA/IhC,SAAmB5E,GAEf,OAAwB,IADZ,gDACJ4F,KAAK5F,GA6I+B6F,CAAU7F,KAE9BiH,aAAcjH,EACdkH,mBAAsB,mBAG9B,eAAC3O,EAAA,EAAD,CAAMC,MAAO,CAACmN,UAAkB,IAAP/R,EAAW,IAAKA,OAAc,IAAPA,EAAW,KAA3D,UACI,cAACgF,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACC,6BAED,cAACwO,EAAA,EAAD,CACI4C,iBAAiB,EACjBK,aAAa,WACbzC,aAAa,UACblL,MAAO,CAACrE,EAAO+C,aAAc/C,EAAOG,YACpC2M,UAAW,GACXqC,aAAc,SAAC2B,GAAD,OAAcC,EAAYD,IACxCgC,aAAchC,EACdiC,mBAAsB,sBAI9B,cAACzO,EAAA,EAAD,CACIoL,WAAY,kBAAMkD,EAAO/G,EAAOiF,IAChCzM,MAAO,CAACrE,EAAO8C,mBAAoB,CAAC0O,UAAiB,IAAP/R,EAAW,MACzD0F,UAAWoN,GAAczB,EAASxG,QAAQ,EAH9C,SAKI,cAAC7F,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACC,yBAGL,cAAC+D,EAAA,EAAD,CACAoL,WAAY,kBAAM/L,EAAWa,SAAS,WACtCH,MAAO,CAACrE,EAAO8C,mBAAmB,CAAC0O,UAAiB,IAAP/R,EAAW,MAFxD,SAII,cAACgF,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACC,sCAOb,cAAC6D,EAAA,EAAD,CAAMC,MAAO,CAAC2O,IAAW,IAAPvT,EAAW,KAA7B,SACI,cAACgF,EAAA,EAAD,CAAMJ,MAAOrE,EAAOS,gBAApB,SACK,kD,knBCzLN,SAASwS,GAAT,GAAmD,IAApBxN,EAAmB,EAAnBA,MAAO9B,EAAY,EAAZA,WAG3CH,EAAOiC,EAAMW,OAAO5C,KAC1B,EAAoCiD,mBAAShB,EAAMW,OAAO3C,YAA1D,WAAOA,EAAP,KAAmByP,EAAnB,KACMtP,EAAQ6B,EAAMW,OAAOxC,MAG3B,EAAoD6C,mBAAShD,EAAWU,oBAAxE,WAAOA,EAAP,KAA2BgP,EAA3B,KAEA,EAA4B1M,mBAAS,MAArC,WAAO4F,EAAP,KAAe+G,EAAf,KAEA,EAAwC3M,oBAAS,GAAjD,WAAO4M,EAAP,KAAqBC,EAArB,KACA,EAAgC7M,mBAAS,MAAzC,WAAO8M,EAAP,KAAiBC,EAAjB,KACA,EAAkC/M,mBAAS,MAA3C,WAAOgN,EAAP,KAAkBC,EAAlB,KACA,GAAwCjN,oBAAS,GAAjD,aAAOkN,GAAP,MAAqBC,GAArB,MAEA,GAA6BnN,mBAAShD,EAAWuN,SAAjD,aAAMA,GAAN,MAAeC,GAAf,MACA,GAAqBxK,mBAAShD,EAAWwB,KAAzC,aAAMA,GAAN,MAAW4O,GAAX,MAEA,GAAmCpN,oBAAS,GAA5C,aAAMiC,GAAN,MAAkBC,GAAlB,MAEA5B,qBAAU,WACN+M,OAKD,CAACH,GAAcN,IAKlB,IAAMS,GAAa,4BAAA1M,EAAAC,OAAA,uDACfsB,IAAc,GADC,WAAAvB,EAAA,MAEO2C,IAAUC,MAAM3E,GAAQ,SAAAgH,GAAM,OAAEA,EAAOC,aAAa,KAAM7I,EAAWsB,QAF5E,OAEToH,EAFS,OAIT4H,EAAe,GACrB5H,EAAQjC,SAAQ,SAAO8J,EAAG5J,GAAV,eAAAhD,EAAAC,OAAA,gDACN4M,EAAKC,GAAQ1Q,EAAMwQ,EAAGvQ,EAAY2G,GAExC2J,EAAa1J,KAAK4J,GACfD,EAAEpP,UAAUpB,EAAKoB,WAChBgP,IAAgB,GAEhBJ,EAAYQ,EAAEG,KAAKC,KAAK,OACxBV,EAAaM,EAAEK,QARP,+DAWhBnB,EAAc,GAAD,MAAKzP,GAAL,IAAiBuB,YAAamH,EAAQ7B,UACnDgK,GAAeP,GAEfX,EAAUjH,GACVxD,IAAc,GApBC,8DA0KnB,GAAsClC,mBAAS,IAA/C,aAAO8N,GAAP,MAAoBD,GAApB,MA+BA,OACI,eAAClQ,EAAA,EAAD,CAAMC,MAAOrE,EAAOU,UAApB,UAEA,cAAC0M,EAAA,EAAD,CAAOC,cAAc,OACrBC,aAAa,EACbC,QAAS8F,EACT7F,eAAgB,WACd8F,GAAgB,IAJlB,SAOI,eAAC7F,EAAA,EAAD,CAAsBC,SAAS,UAAUC,uBAA+B,GAAPlO,EAAU,IAC3E4E,MAAOrE,EAAOkC,oBADd,UAGA,eAACkC,EAAA,EAAD,CAAMC,MAAO,CAACrE,EAAOc,OAAO,CAAC8M,QAAQ,KAArC,UACI,cAACnJ,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOO,eAArB,SACK4D,EAAmB,2CAAcV,EAAWqB,KAAOrB,EAAWqB,OAEnE,cAACL,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SAC6B,GAAxBkD,EAAWuB,YAAX,6BAAmCvB,EAAWwB,IAA9C,gCAA6DxB,EAAWwB,IAAxE,YAAkFxB,EAAWuB,YAA7F,YAA+GwP,KAAKC,KAAKhR,EAAWwB,IAAIxB,EAAWuB,aAAnJ,cAIT,cAACZ,EAAA,EAAD,CAAMC,MAAOrE,EAAOc,OAApB,SACA,cAAC2D,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACK,0FAGL,cAACwN,EAAA,EAAD,UACA,eAAC3J,EAAA,EAAD,CAAMC,MAAOrE,EAAOuC,6BAApB,UAIF,eAAC6B,EAAA,EAAD,CAAMC,MAAO,CACXzD,cAAc,OADhB,UAIE,cAACmO,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOkD,6BAA8BlD,EAAOO,cAAc,CAACsB,YAAY,EAAGX,aAAa,IAC/FoO,UAAU,EACVN,YAAa,4BACbC,qBAAsBlP,IAGtB,cAACgP,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOqD,8BAA+BrD,EAAOG,WAAW,CAAC0B,YAAY,EAAGX,aAAa,IAC7FoO,UAAU,EACVN,YAAa,6BACbC,qBAAsBlP,OAMxB,eAACqE,EAAA,EAAD,CAAMC,MAAO,CACXzD,cAAc,MACdI,WAAW,UAFb,UAKE,cAAC+N,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOkD,6BAA8BlD,EAAOG,WAAY,CAACG,UAAU,SAC3EwS,aAAc9B,GACd7B,aAAc,SAAC3H,GAEPyJ,GADDzJ,GAIY/D,EAAWuN,YAK9B,cAACjC,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOqD,8BAA+BrD,EAAOG,YACrD2S,aAAY,GAAK7N,GACjBgK,qBAAsBlP,EACtBwP,aAAa,UACbJ,aAAc,SAAC3H,GAEPqM,GADDrM,EACQiE,SAASjE,GAGT/D,EAAWwB,WAU5B,eAACb,EAAA,EAAD,CAAMC,MAAO,CACXzD,cAAc,OADhB,UAIE,cAACmO,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOkD,6BAA8BlD,EAAOO,cAAc,CAACsB,YAAY,EAAGX,aAAa,IAC/FoO,UAAU,EACVN,YAAa,4BACbC,qBAAsBlP,IAGtB,cAACgP,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOqD,8BAA+BrD,EAAOG,WAAW,CAAC0B,YAAY,EAAGX,aAAa,IAC7FoO,UAAU,EACV5K,cAAe,EACfsK,YAAa,uBACbC,qBAAsBlP,OAKxB,eAACqE,EAAA,EAAD,CAAMC,MAAO,CACXzD,cAAc,MACdI,WAAW,UAFb,UAKE,cAAC+N,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOkD,6BAA8BlD,EAAOG,WAAY,CAACG,UAAU,SAC3EoU,WAAW,EACX1F,YAAa,8UACbC,qBAAsBlP,EACtBoP,aAAc,SAAC3H,GAAUgM,EAAYhM,IACrCsL,aAAcS,IAGd,cAACxE,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOqD,8BAA+BrD,EAAOG,YACrD6O,YAAa,kCACbC,qBAAsBlP,EACtBwP,aAAa,UACbJ,aAAc,SAAC3H,GAAQkM,EAAajI,SAASjE,UAM/C,eAACpD,EAAA,EAAD,CAAMC,MAAO,CAACzD,cAAc,MAAOoC,eAAsB,IAAPvD,EAAW,KAA7D,UAEA,cAAC6E,EAAA,EAAD,CACAD,MAASrE,EAAOyC,YAChB8B,QAAS,WAEN+O,GAAgB,IAJnB,SAOA,cAAC7O,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACC,mBAIC,cAAC+D,EAAA,EAAD,CACFD,MAASrE,EAAOyC,YAChB8B,QAAS,WACAgP,GAAYE,EAvNX,uBAAArM,EAAAC,OAAA,uDAGNsN,EAAYpB,EAASzF,MAAM,MAHrB,WAAA1G,EAAA,MAOiB2C,IAAUC,MAAM3E,GAAQ,SAAAgH,GAAM,OAAIA,EAAOzH,SAAS,KAAMpB,EAAKoB,UAAU0H,aAAa,KAAM7I,EAAWsB,QAPtH,cAON6P,EAPM,2BAAAxN,EAAA,MASD2C,IAAUyB,KAAKnG,EAAOsG,OAAOiJ,EAAe,IAAI,SAAAhJ,GAEvDA,EAAQuI,KAAOQ,EACf/I,EAAQyI,MAAQZ,OAZR,UAeThQ,EAAWuN,UAAYA,IAASvN,EAAWwB,MAAQA,GAf1C,oCAAAmC,EAAA,MAgByB2C,IAAUC,MAAM1E,EAAY7B,EAAWsB,KAhBhE,eAgBF8P,EAhBE,mBAAAzN,EAAA,MAiBF2C,IAAUyB,KAAKlG,EAAWqG,OAAOkJ,GAAoB,SAAAjJ,GAEvDA,EAAQoF,QAAUA,GAClBpF,EAAQ3G,IAAMA,QApBV,QAwBZqO,GAAgB,GAxBJ,mHAyNAwB,GAGAxN,IAAMC,MAAM,2BAAO,wGAAwB,CAAC,CAACC,KAAM,mBAR3D,SAYF,cAAC/C,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACC,0DAiBC,eAAC6D,EAAA,EAAD,CAAMC,MAAOrE,EAAOc,OAApB,UACI,cAAC2D,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACK4D,EAAmB,2CAAcV,EAAWqB,KAAOrB,EAAWqB,OAEnE,cAACL,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SAC6B,GAAxBkD,EAAWuB,YAAX,6BAAmCvB,EAAWwB,IAA9C,gCAA6DxB,EAAWwB,IAAxE,YAAkFxB,EAAWuB,YAA7F,YAA+GwP,KAAKC,KAAKhR,EAAWwB,IAAIxB,EAAWuB,aAAnJ,cAKT,eAACZ,EAAA,EAAD,CAAMC,MAAOrE,EAAO2C,0BAApB,UACI,cAAC2B,EAAA,EAAD,CAAkBD,MAAOrE,EAAO4C,mBAChC2B,QAAS,WACLuK,IAAgBrL,EAAWsR,MAF/B,SAKI,cAACtQ,EAAA,EAAD,CAAMJ,MAAOrE,EAAOG,WAApB,SACK,6CAKT,cAACmE,EAAA,EAAD,CAAkBD,MAAOrE,EAAO6C,mBAC5B0B,QAAS,WACDJ,EA1OJ,WAEhB,IAAM6Q,EAAe,GACrB3I,EAAOnC,SAAQ,SAAAmC,GACXA,EAAO8H,KAAKjK,SAAQ,SAAAiK,GAChBa,EAAa3K,KAAK8J,SAI1Bc,KAAoBD,EAAaZ,KAAK,OACtC9M,IAAMC,MAAM,2BAAZ,gFAAuCyN,EAAaZ,KAAK,MAAS,CAAC,CAAC5M,KAAM,kBAoOtD0N,GA1UF,qBAAA9N,EAAAC,OAAA,kEAAAD,EAAA,MACU2C,IAAUC,MAAM3E,GAAQ,SAAAgH,GAAM,OAAIA,EAAOzH,SAAS,KAAMpB,EAAKoB,UAAU0H,aAAa,KAAM7I,EAAWsB,QAD/G,iBAGDuF,QAAU,GAHT,mCAAAlD,EAAA,MAIR2C,IAAUyB,KACZ,IAAInG,EAAO,CACP,SAAY7B,EAAKoB,SACjB,MAASpB,EAAKqI,MACd,aAAgBrI,EAAKsI,aACrB,KAAQ,CAAC,IACT,IAAM5H,OAAO,GACb,aAAgBT,EAAWsB,OAXrB,yBAAAqC,EAAA,MAea2C,IAAUC,MAAM1E,EAAY7B,EAAWsB,KAfpD,cAeR2G,EAfQ,mBAAAtE,EAAA,MAgBY2C,IAAUyB,KAAKlG,EAAWqG,OAAOD,GAAc,SAAAE,GAEzEA,EAAQ5G,YAAc4G,EAAQ5G,YAAa,OAlB7B,QAgBRmQ,EAhBQ,OAqBdjC,EAAciC,GAGd7B,GAAgB,GAxBF,wBA6BdA,GAAgB,GA7BF,6DAuUE8B,IAHZ,SAWI,cAAC3Q,EAAA,EAAD,CAAMJ,MAAOrE,EAAOG,WAApB,SACMgE,EAAgC,yCAAb,yDAI7B,cAACG,EAAA,EAAD,CAAkBD,MAAOrE,EAAO4C,mBAChC2B,QAAS,YA9YH,yBAAA6C,EAAAC,OAAA,uDAOVgO,EAAY,GAGZC,EAAY,GAChBjJ,EAAOnC,SAAQ,SAAA8J,GACXqB,EAAUhL,KAAK2J,EAAElI,cAEjBwJ,GAAgBtB,EAAEnI,MAAMiC,MAAM,KAAK,GAA1B,sDAA0CkG,EAAEG,KAA5C,6CAA8DH,EAAEK,MAAS5Q,EAAWwB,IAAIxB,EAAWuB,aAAnG,cAdC,WAAAoC,EAAA,MAoBYmO,QApBZ,qDAAAnO,EAAA,MAuBemO,KACzBF,EADyB,sLAEiBzR,EAAMkB,KAFvB,kDAE0CrB,EAAWqB,KAFrD,kEAE8EwQ,EAF9E,sCAEoG7R,EAAWuN,UAzB9H,gBA0BG,QA1BH,EAuBFwE,QAIJlO,IAAMC,MAAM,2BAAQ,oFAAoB,CAAC,CAACC,KAAM,kBA3B1C,2CAAAJ,EAAA,MAuCa2C,IAAUC,MAAM1E,EAAY7B,EAAWsB,KAvCpD,eAuCR2G,EAvCQ,6BAAAtE,EAAA,MAyCJ2C,IAAUyB,KAAKlG,EAAWqG,OAAOD,GAAc,SAAAE,GACpDA,EAAQzH,oBAAqB,OA1CpB,QA4CVgP,GAAsB,GA5CZ,mDAkDV5L,MAAM,EAAD,IAlDK,kEA+YFkO,IAFJ,SAMI,cAAChR,EAAA,EAAD,CAAMJ,MAAOrE,EAAOG,WAApB,SACMgE,EAAgC,+CAAb,yDAK7B,cAACG,EAAA,EAAD,CAAkBD,MAAOrE,EAAO6C,mBAChC6M,WAAY,WACLvL,EAzPO,mBAAAiD,EAAAC,OAAA,kEAAAD,EAAA,MACK2C,IAAUC,MAAM1E,EAAY7B,EAAWsB,KAD5C,cAChB2G,EADgB,2BAAAtE,EAAA,MAGZ2C,IAAUyB,KAAKlG,EAAWqG,OAAOD,GAAc,SAAAE,GACpDA,EAAQzH,oBAAqB,OAJZ,OAMlBgP,GAAsB,GACtB7L,IAAMC,MAAM,2BAAO,qDAAc,CAAC,CAACC,KAAM,kBAPvB,kDAYlBD,MAAM,EAAD,IAZa,iEA0PNmO,GAlUK,qBAAAtO,EAAAC,OAAA,mDAClB7D,EAAKoB,WAAanB,EAAWoB,QADX,4CAAAuC,EAAA,MAIe2C,IAAUC,MAAM1E,EAAY7B,EAAWsB,KAJtD,cAIP4Q,EAJO,OAKb5L,IAAU6L,OAAOD,GALJ,WAAAvO,EAAA,MAOc2C,IAAUC,MAAMzE,EAAO3B,EAAMmB,KAP3C,cAOP2G,EAPO,mBAAAtE,EAAA,MAQP2C,IAAUyB,KAAKjG,EAAMoG,OAAOD,GAAc,SAAAE,GAEhDA,EAAQlC,gBAAkBkC,EAAQlC,gBAAkB,OAVvC,QAab/F,EAAWkS,SAbE,kDAiBbtO,MAAM,EAAD,IAjBQ,gCAqBjBD,IAAMC,MAAM,2BAAO,kIAA+B,CAAC,CAACC,KAAM,kBArBzC,iEAqULsO,IANR,SAYI,cAACrR,EAAA,EAAD,CAAMJ,MAAOrE,EAAOG,WAApB,SACMgE,EAA0B,yCAAP,kCAOjC,cAACC,EAAA,EAAD,CAAMC,MAAOrE,EAAOmB,IAApB,SACE,cAAC,IAAD,CACA6M,SAAUC,kBACVC,eAAgB5K,EAChBe,MAAOrE,EAAOmB,IACdgN,cAAe,CAAChG,UAAWvE,EAAMuE,UAAWF,SAAUrE,EAAMqE,SAAUG,cAAe,KAAOC,eAAgB,MAC5G+F,uBAAuB,EACvBC,mBAAmB,EACnBC,gBAAgB,EAChBC,aAAa,EACbC,eAAe,EATf,SAWE,cAAC,SAAD,CACItF,WAAY,CAACf,UAAWvE,EAAMuE,UAAWF,SAAUrE,EAAMqE,UACzDkB,MAAOvF,EAAMkB,KACb6E,YAAgB/F,EAAM8F,gBAAX,yCACN9F,EAAMmB,QAMnB,cAACgJ,EAAA,EAAD,CAAY1J,MAAOrE,EAAOwB,wBAC1BoO,eACE,cAACC,EAAA,EAAD,CACEnH,WAAYA,GACZoH,UAAW,WACTgE,QALN,SAWCS,QASb,SAASL,GAAQ1Q,EAAM6I,EAAQ5I,EAAY2G,GAMnC,IAEIrG,EAFEC,EAAsBjE,EACtBkE,EAAuBlE,EAGzBgE,EADDG,OAAOkG,GAAQ,GAAK,EACCnG,EAGAD,EAqBxB,OAEI,eAACM,EAAA,EAAD,CAAkBD,MAAO,CAACrE,EAAOyB,eAAe,CAACd,gBAAgBoD,IACjEoB,UAAU,EADV,UAGI,eAACb,EAAA,EAAD,CACAC,QACI,YAzBI,mBAAA6C,EAAAC,OAAA,kEAAAD,EAAA,MACcmO,QADd,qDAAAnO,EAAA,MAIamO,KACzBlJ,EAAOP,aADkB,+EAENrI,EAAWqB,KAFL,sDAEuBuH,EAAO8H,KAAK4B,WAFnC,kFAEkE1J,EAAOgI,MAAS5Q,EAAWwB,IAAIxB,EAAWuB,aAF5G,yFAEgJvB,EAAWuN,UANxK,gBAOC,QAPD,EAIJwE,OAIJlO,IAAMC,MAAM,2BAAO,oFAAmB,CAAC,CAACC,KAAK,kBAI7CD,MAAM,qFAZE,6EA0BAyO,IAGR7Q,SAAUkH,EAAOzH,WAAapB,EAAKoB,SANnC,UAQA,cAACH,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOO,cAAeP,EAAOgC,eAC3C2C,cAAc,OACdD,cAAe,EAFf,SAGE2H,EAAOR,MAAMiC,MAAM,KAAK,KAE1B,cAACrJ,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAYH,EAAOgC,eACxC2C,cAAc,OACdD,cAAe,EAFf,SAGG2H,EAAOzH,WAAWpB,EAAKoB,SAAU,4BAAQ,6CAI5C,cAACN,EAAA,EAAD,CACAC,QAAS,WACL+C,IAAMC,MAAS8E,EAAOR,MAAMiC,MAAM,KAAK,GAAvC,qDAAyDzB,EAAO8H,KAAhE,yBAA8E9H,EAAOgI,MAArF,+BAAqG5Q,EAAWwB,IAAIxB,EAAWuB,YAA/H,SAA+I,CAAC,CAACwC,KAAK,mBAF1J,SAKA,cAAC/C,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAWH,EAAO+B,gBAAvC,SAA4DsK,EAAO8H,KAAK,GAAxE,WAAgF9H,EAAO8H,KAAK7J,OAA5F,aAGA,cAAC7F,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAYH,EAAOiC,mBAAxC,SAA6DuS,KAAKC,KAAKpI,EAAOgI,MAAS5Q,EAAWwB,IAAIxB,EAAWuB,aAAc,aA/BxCqH,EAAOtH,I,skBCrjB/F,SAASkR,GAAT,GAAoD,IAApBxQ,EAAmB,EAAnBA,MAAO9B,EAAY,EAAZA,WAI5CH,EAAOiC,EAAMW,OAAO5C,KAC1B,EAAoCiD,mBAAShB,EAAMW,OAAO3C,YAA1D,WAAOA,EAAP,KAAmByP,EAAnB,KACMtP,EAAQ6B,EAAMW,OAAOxC,MAG3B,EAAwC6C,oBAAS,GAAjD,WAAO4M,EAAP,KAAqBC,EAArB,KACA,EAAgC7M,mBAAS,wEAAzC,WAAO8M,EAAP,KAAiBC,EAAjB,KACA,EAAkC/M,mBAAS,GAA3C,WAAOgN,EAAP,KAAkBC,EAAlB,KACA,EAAwCjN,oBAAS,GAAjD,WAAOkN,EAAP,KAAqBC,EAArB,KAEA,EAAmCnN,oBAAS,GAA5C,WAAMiC,EAAN,KAAkBC,EAAlB,KAEA5B,qBAAU,WACN+M,OAKD,CAACH,EAAcN,IAElB,IAAMS,GAAa,4BAAA1M,EAAAC,OAAA,uDACfsB,GAAc,GADC,WAAAvB,EAAA,MAGO2C,IAAUC,MAAM3E,GAAQ,SAAAgH,GAAM,OAAEA,EAAOC,aAAa,KAAM7I,EAAWsB,QAH5E,OAGToH,EAHS,OAKT4H,EAAe,GACrB5H,EAAQjC,SAAQ,SAAO8J,EAAG5J,GAAV,eAAAhD,EAAAC,OAAA,gDACN4M,EAAKC,GAAQ1Q,EAAMwQ,EAAGvQ,EAAY2G,GAExC2J,EAAa1J,KAAK4J,GACfD,EAAEpP,UAAUpB,EAAKoB,WAChBgP,GAAgB,GAEhBJ,EAAYQ,EAAEG,KAAKC,KAAK,OACxBV,EAAaM,EAAEK,QARP,+DAWhBnB,EAAc,SAAIzP,GAAL,IAAiBuB,YAAamH,EAAQ7B,UACnDgK,GAAeP,GACfpL,GAAc,GAnBC,6DAqHnB,GAAsClC,mBAClC,IADJ,aAAO8N,GAAP,MAAoBD,GAApB,MAMA,OACI,eAAClQ,EAAA,EAAD,CAAMC,MAAOrE,EAAOU,UAApB,UAEA,cAAC0M,EAAA,EAAD,CAAOC,cAAc,OACrBC,aAAa,EACbC,QAAS8F,EACT7F,eAAgB,WACd8F,GAAgB,IAJlB,SAOI,eAAC7F,EAAA,EAAD,CAAsBC,SAAS,UAAUC,uBAA+B,GAAPlO,EAAU,IAC3E4E,MAAOrE,EAAOkC,oBADd,UAGA,eAACkC,EAAA,EAAD,CAAMC,MAAO,CAACrE,EAAOc,OAAO,CAAC8M,QAAQ,KAArC,UACI,cAACnJ,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACKkD,EAAWqB,OAEhB,cAACL,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SAC6B,GAAxBkD,EAAWuB,YAAX,6BAAmCvB,EAAWwB,IAA9C,gCAA6DxB,EAAWwB,IAAxE,YAAkFxB,EAAWuB,YAA7F,YAA+GwP,KAAKC,KAAKhR,EAAWwB,IAAIxB,EAAWuB,aAAnJ,cAIT,cAACZ,EAAA,EAAD,CAAMC,MAAOrE,EAAOc,OAApB,SACA,cAAC2D,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACK,kDAKL,cAACwN,EAAA,EAAD,UACA,eAAC3J,EAAA,EAAD,CAAMC,MAAOrE,EAAOuC,6BAApB,UAGF,eAAC6B,EAAA,EAAD,CAAMC,MAAO,CACXzD,cAAc,OADhB,UAIE,cAACmO,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOkD,6BAA8BlD,EAAOO,cAAc,CAACsB,YAAY,IAC/EyN,UAAU,EACVN,YAAa,4BACbC,qBAAsBlP,IAGtB,cAACgP,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOqD,8BAA+BrD,EAAOG,WAAW,CAAC0B,YAAY,IAC7EyN,UAAU,EACVN,YAAa,uBACbtK,cAAe,EACfuK,qBAAsBlP,OAKxB,eAACqE,EAAA,EAAD,CAAMC,MAAO,CACXzD,cAAc,MACdI,WAAW,UAFb,UAKE,cAAC+N,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOkD,6BAA8BlD,EAAOG,WAAY,CAACG,UAAU,SAC3EoU,WAAW,EAEX1F,YAAa,8UACbC,qBAAsBlP,EACtBoP,aAAc,SAAC3H,GAAUgM,EAAYhM,MAGrC,cAACuH,EAAA,EAAD,CACA1K,MAAO,CAACrE,EAAOqD,8BAA+BrD,EAAOG,YACrD8O,qBAAsBlP,EACtBwP,aAAa,UACbJ,aAAc,SAAC3H,GACXkM,EAAajI,SAASjE,KAE1BwH,YAAa,uCAMf,eAAC5K,EAAA,EAAD,CAAMC,MAAO,CAACzD,cAAc,MAAOoC,eAAsB,IAAPvD,EAAW,KAA7D,UAEA,cAAC6E,EAAA,EAAD,CACAD,MAASrE,EAAOyC,YAChB8B,QAAS,WAEN+O,GAAgB,IAJnB,SAOA,cAAC7O,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACC,mBAIC,cAAC+D,EAAA,EAAD,CACFD,MAASrE,EAAOyC,YAChB8B,QAAS,WACAgP,GAAYE,EA7HX,qBAAArM,EAAAC,OAAA,uDAGNsN,EAAYpB,EAASzF,MAAM,MAHrB,WAAA1G,EAAA,MAOiB2C,IAAUC,MAAM3E,GAAQ,SAAAgH,GAAM,OAAIA,EAAOzH,SAAS,KAAMpB,EAAKoB,UAAU0H,aAAa,KAAM7I,EAAWsB,QAPtH,cAON6P,EAPM,2BAAAxN,EAAA,MASD2C,IAAUyB,KAAKnG,EAAOsG,OAAOiJ,EAAe,IAAI,SAAAhJ,GAEvDA,EAAQuI,KAAOQ,EACf/I,EAAQyI,MAAQZ,OAZR,OAeZH,GAAgB,GAfJ,mHA+HAwB,GAGAxN,IAAMC,MAAM,2BAAO,wGAAwB,CAAC,CAACC,KAAM,mBAR3D,SAYF,cAAC/C,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACC,0DAgBC,eAAC6D,EAAA,EAAD,CAAMC,MAAOrE,EAAOc,OAApB,UACI,cAAC2D,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SACKkD,EAAWqB,OAEhB,cAACL,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SAC6B,GAAxBkD,EAAWuB,YAAX,6BAAmCvB,EAAWwB,IAA9C,gCAA6DxB,EAAWwB,IAAxE,YAAkFxB,EAAWuB,YAA7F,YAA+GwP,KAAKC,KAAKhR,EAAWwB,IAAIxB,EAAWuB,aAAnJ,cAKT,eAACZ,EAAA,EAAD,CAAMC,MAAOrE,EAAO2C,0BAApB,UACI,cAAC2B,EAAA,EAAD,CAAkBD,MAAOrE,EAAO4C,mBAChC2B,QAAS,WACLuK,IAAgBrL,EAAWsR,MAF/B,SAKI,cAACtQ,EAAA,EAAD,CAAMJ,MAAOrE,EAAOG,WAApB,SACK,6CAIT,cAACmE,EAAA,EAAD,CAAkBD,MAAOrE,EAAO6C,mBAC5B0B,QAAS,kBAtPH,8BAAA6C,EAAAC,OAAA,kEAAAD,EAAA,MACU2C,IAAUC,MAAM3E,GAAQ,SAAAgH,GAAM,OAAIA,EAAOzH,SAAS,KAAMpB,EAAKoB,UAAU0H,aAAa,KAAM7I,EAAWsB,QAD/G,UACZmR,EADY,OAGlBtC,EAAgBsC,EAAc5L,OAAO,GACjCqJ,EAJc,mCAAAvM,EAAA,MAKR2C,IAAUyB,KACZ,IAAInG,EAAO,CACP,SAAY7B,EAAKoB,SACjB,MAASpB,EAAKqI,MACd,aAAgBrI,EAAKsI,aACrB,KAAQ,CAAC,wEACT,IAAM5H,OAAO,GACb,aAAgBT,EAAWsB,OAZrB,yBAAAqC,EAAA,MAgBa2C,IAAUC,MAAM1E,EAAY7B,EAAWsB,KAhBpD,cAgBR2G,EAhBQ,mBAAAtE,EAAA,MAiBY2C,IAAUyB,KAAKlG,EAAWqG,OAAOD,GAAc,SAAAE,GAErEA,EAAQ5G,YAAc4G,EAAQ5G,YAAa,OAnBjC,QAiBRmQ,EAjBQ,OAsBdjC,EAAciC,GAEd7B,GAAgB,GAxBF,wBA6BdA,GAAgB,GA7BF,6DAsPS8B,IADnB,SAGI,cAAC3Q,EAAA,EAAD,CAAMJ,MAAOrE,EAAOG,WAApB,SACMwT,EAAc,4BAAQ,+BAIhC,cAACrP,EAAA,EAAD,CAAkBD,MAAOrE,EAAO4C,mBAChCuC,UAAU,EADV,SAGI,cAACV,EAAA,EAAD,CAAMJ,MAAQrE,EAAOS,gBAArB,SACK,gEAIT,cAAC6D,EAAA,EAAD,CAAkBD,MAAOrE,EAAO6C,mBAChC6M,WAAY,kBArOH,0BAAAtI,EAAAC,OAAA,mDACd7D,EAAKoB,WAAanB,EAAWoB,QADf,4CAAAuC,EAAA,MAIa2C,IAAU6L,OAAOvQ,GAAQ,SAAAgH,GAAM,OAAIA,EAAOzH,SAAS,KAAMpB,EAAKoB,UAAU0H,aAAa,KAAM7I,EAAWsB,QAJnH,mBAOEuF,OAAO,GAPT,mCAAAlD,EAAA,MAQsB2C,IAAUC,MAAM1E,EAAY7B,EAAWsB,KAR7D,cAQC2G,EARD,mBAAAtE,EAAA,MAUC2C,IAAUyB,KAAKlG,EAAWqG,OAAOD,GAAc,SAAAE,GAErDA,EAAQ5G,aAAe,OAZlB,QAcLrB,EAAWkS,SAEXjC,GAAgB,GAhBX,wBAmBLtM,IAAMC,MAAM,2BAAO,8EAAkB,CAAC,CAACC,KAAK,kBAnBvC,0DAuBS,oCAAf,KAAMsK,MAGc,sBAAf,KAAMA,KAFVxK,IAAMC,MAAM,2BAAO,+EAAmB,CAAC,CAACC,KAAK,kBAO7CD,MAAM,kEA/BD,gCAoCbD,IAAMC,MAAM,2BAAO,yGAAyB,CAAC,CAACC,KAAK,kBApCtC,iEAqOS2O,IAClBhR,UAAWwO,EAFX,SAIA,cAAClP,EAAA,EAAD,CAAMJ,MAASsP,EAAwC3T,EAAOG,WAAhCH,EAAOS,gBAArC,SACK,kCAOT,cAAC2D,EAAA,EAAD,CAAMC,MAAOrE,EAAOiB,aAApB,SACE,cAAC,IAAD,CACA+M,SAAUC,kBACVC,eAAgB5K,EAChBe,MAAOrE,EAAOmB,IACdgN,cAAe,CAAChG,UAAWvE,EAAMuE,UAAWF,SAAUrE,EAAMqE,SAAUG,cAAe,KAAOC,eAAgB,MAC5G+F,uBAAuB,EACvBC,mBAAmB,EACnBC,gBAAgB,EAChBC,aAAa,EACbC,eAAe,EATf,SAWE,cAAC,SAAD,CACItF,WAAY,CAACf,UAAWvE,EAAMuE,UAAWF,SAAUrE,EAAMqE,UACzDkB,MAAOvF,EAAMkB,KACb6E,YAAgB/F,EAAM8F,gBAAX,yCACN9F,EAAMmB,QAKnB,cAAC4K,EAAA,EAAD,UAEA,cAAC5B,EAAA,EAAD,CAAY1J,MAAOrE,EAAOwB,wBAC1BoO,eACE,cAACC,EAAA,EAAD,CACEnH,WAAYA,EACZoH,UAAW,WACTgE,QALN,SAYCS,UASb,SAASL,GAAQ1Q,EAAM6I,EAAQ5I,EAAY2G,GAIvC,IAEIrG,EAFEC,EAAsBjE,EACtBkE,EAAuBlE,EAQ7B,OALIgE,EADDG,OAAOkG,GAAQ,GAAK,EACCnG,EAGAD,EAIpB,eAACM,EAAA,EAAD,CAAkBD,MAAO,CAACrE,EAAOyB,eAAe,CAACd,gBAAgBoD,IACjEoB,UAAU,EADV,UAII,cAACV,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOO,cAAeP,EAAOgC,eAC3C2C,cAAc,OACdD,cAAe,EAFf,SAGE2H,EAAOzH,WAAWpB,EAAKoB,SAAS,4BAAQyH,EAAOR,MAAMiC,MAAM,KAAK,KAGlE,cAACxJ,EAAA,EAAD,CACAC,QAAS,WACL+C,IAAMC,MAAS8E,EAAOR,MAAMiC,MAAM,KAAK,GAAvC,qDAAyDzB,EAAO8H,KAAhE,yBAA8E9H,EAAOgI,MAArF,+BAAqG5Q,EAAWwB,IAAIxB,EAAWuB,YAA/H,SAA+I,CAAC,CAACwC,KAAK,mBAF1J,SAKA,cAAC/C,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAWH,EAAO+B,gBAAvC,SAA4DsK,EAAO8H,KAAK,GAAxE,WAAgF9H,EAAO8H,KAAK7J,OAA5F,aAIA,cAAC7F,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAYH,EAAOiC,mBAAxC,SAA6DuS,KAAKC,KAAKpI,EAAOgI,MAAS5Q,EAAWwB,IAAIxB,EAAWuB,aAAc,aAnBxCqH,EAAOtH,ICzX3F,SAASqR,GAAT,GAAuD,IAApB3Q,EAAmB,EAAnBA,MAG9C,GAHiE,EAAZ9B,WAGzB8C,mBAAS,OAArC,WAAO4F,EAAP,KAAe+G,EAAf,KACA,EAAwC3M,oBAAS,GAAjD,WAAOkN,EAAP,KAAqBC,EAArB,KAEMpQ,EAAOiC,EAAMW,OAAO5C,KACpBC,EAAagC,EAAMW,OAAO3C,WAC1BG,EAAQ6B,EAAMW,OAAOxC,MAG3BmD,qBAAU,WACN+M,MAKD,IAEH,IAAMA,EAAa,4BAAA1M,EAAAC,OAAA,kEAAAD,EAAA,MACO2C,IAAUC,MAAM3E,GAAQ,SAAAgH,GAAM,OAAEA,EAAOC,aAAa,KAAM7I,EAAWsB,QAD5E,OACToH,EADS,OAGT4H,EAAe,GACrB5H,EAAQjC,SAAQ,SAAO8J,EAAG5J,GAAV,eAAAhD,EAAAC,OAAA,gDACN4M,EAAKC,GAAQ1Q,EAAMwQ,EAAGvQ,EAAY2G,GAExC2J,EAAa1J,KAAK4J,GACfD,EAAEpP,UAAUpB,EAAKoB,UAChBgP,GAAgB,GALR,+DAUhBU,EAAeP,GAEfX,EAAUjH,GAhBK,6DA2CnB,EAAsC1F,mBAClC,IADJ,WAAO8N,EAAP,KAAoBD,EAApB,KAMA,OACI,eAAClQ,EAAA,EAAD,CAAMC,MAAOrE,EAAOU,UAApB,UAGI,eAAC0D,EAAA,EAAD,CAAMC,MAAOrE,EAAOc,OAApB,UACI,cAAC2D,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,oDACkBkD,EAAWqB,OAE7B,cAACL,EAAA,EAAD,CAAMJ,MAAOrE,EAAOO,cAApB,SAC6B,GAAxBkD,EAAWuB,YAAX,6BAAmCvB,EAAWwB,IAA9C,gCAA6DxB,EAAWwB,IAAxE,YAAkFxB,EAAWuB,YAA7F,YAA+GwP,KAAKC,KAAKhR,EAAWwB,IAAIxB,EAAWuB,aAAnJ,cAMT,eAACZ,EAAA,EAAD,CAAMC,MAAOrE,EAAO2C,0BAApB,UACI,cAAC2B,EAAA,EAAD,CAAkBD,MAAOrE,EAAO4C,mBAChC2B,QAAS,WACLuK,IAAgBrL,EAAWsR,MAE/B5P,UAAWwO,EAJX,SAMI,cAAClP,EAAA,EAAD,CAAMJ,MAAQsP,EAAc3T,EAAOG,WAAWH,EAAOqW,YAArD,SACK,6CAIT,cAAC/R,EAAA,EAAD,CAAkBD,MAAOrE,EAAO6C,mBAC5B0B,QAAS,WACL+C,IAAMC,MAAM,2BAAO,wCAAW,CAAC,CAACC,KAAM,mBAF9C,SAKI,cAAC/C,EAAA,EAAD,CAAMJ,MAAQsP,EAAc3T,EAAOG,WAAWH,EAAOqW,YAArD,SACK,yDAIT,cAAC/R,EAAA,EAAD,CAAkBD,MAAOrE,EAAO4C,mBAChC2B,QAAS,kBApEH,EAAA6C,EAAAC,OAAA,gDACd4N,KAAA,GAAuBqB,UAAUtF,UAIE,IAFvB,uCAEJS,KAAKhO,EAAWuN,SACpB1J,IAAMC,MAAM,2BAAO,oFAAoB,CAAC,CAACC,KAAM,oDAAajD,QAAS,WACjEuK,IAAA,GAAmBrL,EAAWuN,WAC9B,CAACxJ,KAAM,kBAGXF,IAAMC,MAAM,2BAAO,oFAAoB,CAAC,CAACC,KAAM,kBAXrC,6DAqENrC,UAAWwO,EAFX,SAII,cAAClP,EAAA,EAAD,CAAMJ,MAAQsP,EAAc3T,EAAOG,WAAWH,EAAOqW,YAArD,SACK,6CAIT,cAAC/R,EAAA,EAAD,CAAkBD,MAAOrE,EAAO6C,mBAC5B0B,QAAS,YA9DD,mBAAA6C,EAAAC,OAAA,gDAGdkP,EAAmBlK,EAAOuC,QAAO,SAAAvC,GAAM,OAAIA,EAAOzH,UAAYnB,EAAWoB,WAAS,GAAGiH,aAG3F0K,aAAaD,EAAD,gDAAgC/S,EAAKqI,MAAMiC,MAAM,KAAK,GAAtD,2CAAqErK,EAAWqB,KAAhF,MANQ,4DA+DJ2R,IACAtR,UAAWwO,EAHnB,SAKI,cAAClP,EAAA,EAAD,CAAMJ,MAAQsP,EAAc3T,EAAOG,WAAWH,EAAOqW,YAArD,SACK,wEAOb,cAACjS,EAAA,EAAD,CAAMC,MAAOrE,EAAOiB,aAApB,SACE,cAAC,IAAD,CACA+M,SAAUC,kBACVC,eAAgB5K,EAChBe,MAAOrE,EAAOmB,IACdgN,cAAe,CAAChG,UAAWvE,EAAMuE,UAAWF,SAAUrE,EAAMqE,SAAUG,cAAe,KAAOC,eAAgB,MAC5G+F,uBAAuB,EACvBC,mBAAmB,EACnBC,gBAAgB,EAChBC,aAAa,EACbC,eAAe,EATf,SAWE,cAAC,SAAD,CACItF,WAAY,CAACf,UAAWvE,EAAMuE,UAAWF,SAAUrE,EAAMqE,UACzDkB,MAAOvF,EAAMkB,KACb6E,YAAgB/F,EAAM8F,gBAAX,yCACN9F,EAAMmB,QAMnB,cAACgJ,EAAA,EAAD,CAAY1J,MAAOrE,EAAOwB,wBAA1B,SACC+S,OAQb,SAASL,GAAQ1Q,EAAM6I,EAAQ5I,EAAY2G,GAIvC,IAEIrG,EAFEC,EAAsBjE,EACtBkE,EAAuBlE,EAQ7B,OALIgE,EADDG,OAAOkG,GAAQ,GAAK,EACCnG,EAGAD,EAIpB,eAACM,EAAA,EAAD,CAAkBD,MAAO,CAACrE,EAAOyB,eAAe,CAACd,gBAAgBoD,IACjEoB,UAAU,EADV,UAII,cAACV,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOO,cAAeP,EAAOgC,eAC3C2C,cAAc,OACdD,cAAe,EAFf,SAGE2H,EAAOzH,WAAWpB,EAAKoB,SAAS,4BAAQyH,EAAOR,MAAMiC,MAAM,KAAK,KAGlE,cAACxJ,EAAA,EAAD,CACAC,QAAS,WACL+C,IAAMC,MAAS8E,EAAOR,MAAMiC,MAAM,KAAK,GAAvC,qDAAyDzB,EAAO8H,KAAhE,yBAA8E9H,EAAOgI,MAArF,+BAAqG5Q,EAAWwB,IAAIxB,EAAWuB,YAA/H,SAA+I,CAAC,CAACwC,KAAK,mBAF1J,SAKA,cAAC/C,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAWH,EAAO+B,gBAAvC,SAA4DsK,EAAO8H,KAAK,GAAxE,WAAgF9H,EAAO8H,KAAK7J,OAA5F,aAIA,cAAC7F,EAAA,EAAD,CAAMJ,MAAO,CAACrE,EAAOG,WAAYH,EAAOiC,mBAAxC,SAA6DuS,KAAKC,KAAKpI,EAAOgI,MAAS5Q,EAAWwB,IAAIxB,EAAWuB,aAAc,aAnBxCqH,EAAOtH,ICnL3F,SAAS2R,GAAT,GAA8C,IAApBjR,EAAmB,EAAnBA,MAAO9B,EAAY,EAAZA,WAG5C,OAAG8B,EAAMW,OAAO3C,WAAWoB,UAAYY,EAAMW,OAAO5C,KAAKoB,SAEjD,cAACqO,GAAD,CAAsBxN,MAAOA,EAAO9B,WAAYA,IAIjD8B,EAAMW,OAAO3C,WAAWU,mBAEnB,cAACiS,GAAD,CAA0B3Q,MAAOA,EAAO9B,WAAYA,IAKpD,cAACsS,GAAD,CAAuBxQ,MAAOA,EAAO9B,WAAYA,I,cCoBlDgT,GArCG,CACd,mBAAsB,iBACtB,4BAA+B,sFAC/B,mBAAsB,iBACtB,+BAAkC,UAClC,mBAAsB,iCACtB,6BAAgC,sDAChC,mBAAsB,iBACtB,kBAAqB,2BACrB,6BAAgC,6BAChC,MAAS,GACT,gCAAmC,CAC/B,SAEJ,6BAAgC,GAChC,8BAAiC,GACjC,8BAAiC,MACjC,sBAAyB,CACrB,OAEJ,yCAA4C,CACxC,wBAA2B,EAC3B,yBAA4B,CACxB,qBACA,qBAGR,oCAAuC,CACnC,SAEJ,yBAA4B,iCAC5B,gCAAmC,iBACnC,4BAA+B,mCAC/B,gCAAmC,kB,uCCrBvCC,KAAQC,UAAUC,IAElB,IAAMC,GAAQC,eCVdC,aDYe,WAEb,MAAmBC,aAAS,CAC1B,gBAAmBrR,EAAQ,KAC3B,mBAAsBA,EAAQ,KAC9B,iBAAoBA,EAAQ,OAqB5B,OAxBF,YAyBI,cAACsR,GAAA,EAAD,UACE,eAACJ,GAAMK,UAAP,CAAiBC,iBAAkB,SAAnC,UACE,cAACN,GAAMO,OAAP,CAAcxS,KAAK,OAAOyS,UAAWrR,EACrCsR,QAAS,CACPC,aAAa,KAGf,cAACV,GAAMO,OAAP,CAAcxS,KAAK,aAAayS,UAAWb,GAC3Cc,QAAS,CACPC,aAAa,KAGf,cAACV,GAAMO,OAAP,CAAcxS,KAAK,SAASyS,UAAWjF,GACvCkF,QAAS,CACPC,aAAa,KAGf,cAACV,GAAMO,OAAP,CAAcxS,KAAK,SAASyS,UAAWhH,GACvCiH,QAAS,CACPC,aAAa,e","file":"static/js/app.4f8534d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.3983e2b5.png\";","module.exports = __webpack_public_path__ + \"./fonts/Happiness-Sans-Bold.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Happiness-Sans-Regular.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Happiness-Sans-Title.ttf\";","import { StyleSheet, Text, View } from 'react-native';\nimport { Dimensions } from 'react-native';\nimport Constants from 'expo-constants';\nexport const height = Dimensions.get('screen').height-Constants.statusBarHeight; // 2000\nexport const width = Dimensions.get('screen').width; // 1000\nexport const colorPack = {\n    representative: '#17263C',\n    highlight_light: '#38414E',\n    highlight_dark: '#242F3E',\n    text_dark: '#D99066',\n    text_light: '#E4EAF2',\n    deactivated: '#8B9198',\n}\n\n\nexport const styles = StyleSheet.create({\n// TEXT STYLES\n    normalText:{\n        // fontFamily:'happy_sans_bold',\n        fontSize:width*0.04, // 30\n        color: colorPack.text_light,\n        textAlign:'center',\n    },\n    highlightText:{\n        // fontFamily:'happy_sans_title',\n        fontSize:width*0.05, // 40\n        color: colorPack.text_dark,\n        textAlign:'center',\n        fontWeight:'bold',\n    },\n    deactivatedText:{\n        // fontFamily:'happy_sans_regular',\n        fontSize:width*0.04, // 30\n        color: colorPack.deactivated,\n        textAlign:'center',\n    },\n// CONTAINER STYLES\n    container:{\n        width: width,\n        height: Dimensions.get('screen').height,\n        backgroundColor:colorPack.representative,\n        flexDirection: 'column',\n        paddingTop: Constants.statusBarHeight,\n    },\n    header:{\n        height: height * 150/2000,\n        width: width,\n        textAlign: 'center',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    mapContainer:{\n        height: height * 990/2000,\n        width: width,\n        marginBottom: height * 10/2000,\n    },\n    map:{\n        height: height * 990/2000,\n        width: width,\n    },\n    restaurantContainer: {\n        height: height * 710/2000,\n        width:width,\n\n    },\n    locationInfoContainer:{\n        height: height * 106/2000,\n        paddingLeft: width * 30/1000,\n        paddingRight: width * 30/1000,\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between', \n    },\n    restaurantListContainer:{\n        height: height * 604/2000,\n    },\n    restaurantList:{\n        height: height * 150/2000,\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginHorizontal: width*15/1000,\n        paddingHorizontal: width*30/1000,\n        borderColor: colorPack.representative,\n        borderWidth: 3, \n        borderRadius: width*50/1000,\n    },\n    restaurantName:{\n        width: width * 450/1000,\n        textAlign: 'left',\n    },\n    restaurantFee:{\n        width: width * 300/1000,\n        textAlign: 'left',\n    },\n    restaurantMembers:{\n\n    },\n\n\n// modal\n    restaurantInfoModal:{\n      flex:1,\n      paddingVertical: Constants.statusBarHeight,\n      backgroundColor: colorPack.representative,\n    },\n    restaurantInfoContainerModal:{\n        backgroundColor: colorPack.representative,\n        alignItems:'center',\n        flexDirection:'column',\n        justifyContent:'space-between',\n        paddingBottom: height * 100/2000,\n    },\n\n    restaurantPageContainerModal:{\n      backgroundColor: colorPack.representative,\n      alignItems:'center',\n      flexDirection:'column',\n      justifyContent:'space-between',\n      paddingBottom: 0,\n    },\n\n    buttonContainerModal:{\n        height: height * 60/2000,\n        flexDirection:'row',\n        justifyContent:'space-between',\n        alignItems:'stretch',\n    },\n\n    modalButton:{\n        width: width * 400/1000,\n        height: height * 100/2000,\n        backgroundColor: colorPack.highlight_light,\n        borderRadius: height * 50/2000,\n        justifyContent:'center',\n        marginHorizontal:width*20/1000,\n        alignItems:'center',\n    },\n\n    getRestaurantInfoModal:{\n        height: height * 250/2000,\n        width:width,\n        alignItems:'center',\n    },\n\n    // restaurantPage\n\n    restaurantButtonContainer:{\n        flexDirection:'row',\n    },\n    restaurantButton_1:{\n        width: width * 0.25,\n        alignItems:'center',\n        justifyContent:'center',\n        backgroundColor: colorPack.highlight_dark,\n        \n        height: height * 150/2000,\n        borderRadius: height * 50/2000,\n        borderColor: colorPack.representative,\n        borderWidth: 3,\n        marginBottom: height * 20/2000,\n    },\n    restaurantButton_2:{\n        width: width * 0.25,\n        alignItems:'center',\n        justifyContent:'center',\n        backgroundColor: colorPack.highlight_light,\n\n        height: height * 150/2000,\n        borderRadius: height * 50/2000,\n        borderColor: colorPack.representative,\n        borderWidth: 3,\n        marginBottom: height * 20/2000,\n    },\n\n    // sign in page\n    goToSignUpInButton:{\n        width: width * 700/1000,\n        height: height * 100/2000,\n        backgroundColor: colorPack.highlight_light,\n        borderRadius: height * 50/2000,\n        justifyContent:'center',\n        marginHorizontal: width * 150/1000,\n    },\n    textInputBox:{\n        width: width * 700/1000,\n        height: height * 100/2000,\n        borderRadius: height * 30/2000,\n        borderColor: colorPack.highlight_light,\n        borderWidth: width* 10/2000,\n        marginVertical: height * 35/2000,\n        marginHorizontal: width * 150/1000,\n        textAlign:'center',\n        textAlignVertical:'center',\n        color: colorPack.text_light,\n        paddingHorizontal: width * 20/1000,\n    },\n    textInputBox_restaurant_menu:{\n        width: width * 600/1000,\n        \n        borderRadius: height * 30/2000,\n        borderColor: colorPack.highlight_light,\n        borderWidth: width* 10/2000,\n        marginVertical: height * 35/2000,\n        marginHorizontal: width * 50/1000,\n        textAlign:'center',\n        textAlignVertical:'center',\n        lineHeight: height * 50/2000,\n        padding:width*20/1000\n    },\n    textInputBox_restaurant_price:{\n        width: width * 250/1000,\n        height: height * 100/2000,\n        borderRadius: height * 30/2000,\n        borderColor: colorPack.highlight_light,\n        borderWidth: width* 10/2000,\n        marginVertical: height * 35/2000,\n        marginHorizontal: width * 50/1000,\n        textAlign:'center',\n        textAlignVertical:'center',\n        padding:width*20/1000\n    },\n\n\n});\n\nexport const map_darkStyle =[\n        {\n          \"elementType\": \"geometry\",\n          \"stylers\": [\n            {\n              \"color\": \"#242f3e\"\n            }\n          ]\n        },\n        {\n          \"elementType\": \"labels.text.fill\",\n          \"stylers\": [\n            {\n              \"color\": \"#746855\"\n            }\n          ]\n        },\n        {\n          \"elementType\": \"labels.text.stroke\",\n          \"stylers\": [\n            {\n              \"color\": \"#242f3e\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"administrative.locality\",\n          \"elementType\": \"labels.text.fill\",\n          \"stylers\": [\n            {\n              \"color\": \"#d59563\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"poi\",\n          \"elementType\": \"labels.text.fill\",\n          \"stylers\": [\n            {\n              \"color\": \"#d59563\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"poi.park\",\n          \"elementType\": \"geometry\",\n          \"stylers\": [\n            {\n              \"color\": \"#263c3f\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"poi.park\",\n          \"elementType\": \"labels.text.fill\",\n          \"stylers\": [\n            {\n              \"color\": \"#6b9a76\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"road\",\n          \"elementType\": \"geometry\",\n          \"stylers\": [\n            {\n              \"color\": \"#38414e\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"road\",\n          \"elementType\": \"geometry.stroke\",\n          \"stylers\": [\n            {\n              \"color\": \"#212a37\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"road\",\n          \"elementType\": \"labels.text.fill\",\n          \"stylers\": [\n            {\n              \"color\": \"#9ca5b3\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"road.highway\",\n          \"elementType\": \"geometry\",\n          \"stylers\": [\n            {\n              \"color\": \"#746855\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"road.highway\",\n          \"elementType\": \"geometry.stroke\",\n          \"stylers\": [\n            {\n              \"color\": \"#1f2835\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"road.highway\",\n          \"elementType\": \"labels.text.fill\",\n          \"stylers\": [\n            {\n              \"color\": \"#f3d19c\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"transit\",\n          \"elementType\": \"geometry\",\n          \"stylers\": [\n            {\n              \"color\": \"#2f3948\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"transit.station\",\n          \"elementType\": \"labels.text.fill\",\n          \"stylers\": [\n            {\n              \"color\": \"#d59563\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"water\",\n          \"elementType\": \"geometry\",\n          \"stylers\": [\n            {\n              \"color\": \"#17263c\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"water\",\n          \"elementType\": \"labels.text.fill\",\n          \"stylers\": [\n            {\n              \"color\": \"#515c6d\"\n            }\n          ]\n        },\n        {\n          \"featureType\": \"water\",\n          \"elementType\": \"labels.text.stroke\",\n          \"stylers\": [\n            {\n              \"color\": \"#17263c\"\n            }\n          ]\n        }\n]\n","import {View, Text, TouchableOpacity} from 'react-native-web';\nimport { colorPack, styles, width } from '../style/style';\n\n\nfunction Main_restaurantList(user, restaurant, num, navigation, place, setRestaurantList, restaurantList, refreshRestaurantList) {\n  const backgroundColor_odd = colorPack.highlight_dark\n  const backgroundColor_even = colorPack.highlight_light\n  var myBackgroundColor\n\n  // console.log('Main_restaurantList', user, restaurant)\n  if(Number(num) %2 == 0){\n    myBackgroundColor = backgroundColor_even\n  }\n  else{\n    myBackgroundColor = backgroundColor_odd\n  }\n\n\n  // console.log(restaurantList)\n\n // return \n  return (restaurant.isFinishRecruiting?\n    (<View style={[styles.restaurantList,{backgroundColor:myBackgroundColor}]} \n    key={restaurant.id}   \n    >\n    <TouchableOpacity\n    onPress=  {() => {  \n      // console.log(JSON.stringify(user))\n      navigation.navigate('Restaurant', {user:user, restaurant:restaurant, place:place})\n      // console.log('pressed')\n    }}\n    >\n\n      <Text style={[styles.deactivatedText, styles.restaurantName]} numberOfLines={1} ellipsizeMode='tail' \n      >{user.username == restaurant.makerID?`\"${restaurant.name}\"`:restaurant.name}</Text>\n\n    </TouchableOpacity>\n      <Text style={[styles.normalText, styles.restaurantFee,]} ellipsizeMode='tail' numberOfLines={1}>{''}</Text>\n\n      <Text style={[styles.normalText, styles.restaurantMembers]} ellipsizeMode='tail' numberOfLines={1}>{`모집종료`}</Text>\n\n    </View>)\n    :\n    (<View style={[styles.restaurantList,{backgroundColor:myBackgroundColor}]} \n    key={restaurant.id}   \n    >\n    <TouchableOpacity\n    onPress=  {() => {\n      navigation.navigate('Restaurant', {user:user, restaurant:restaurant, place:place})\n      // console.log('pressed')\n    }}>\n\n      <Text style={[styles.highlightText, styles.restaurantName]} numberOfLines={1} ellipsizeMode='tail' \n      >{user.username == restaurant.makerID?`\"${restaurant.name}\"`:restaurant.name}</Text>\n\n      </TouchableOpacity>\n      <Text style={[styles.normalText, styles.restaurantFee,]} ellipsizeMode='tail' numberOfLines={1}>{restaurant.num_members==0?`총 ${restaurant.fee}원`:`각 ${restaurant.fee/restaurant.num_members}원`}</Text>\n\n      <Text style={[styles.normalText, styles.restaurantMembers]} ellipsizeMode='tail' numberOfLines={1}>{`${restaurant.num_members}명`}</Text>\n\n    </View>)\n  );  // return\n}\n\nfunction Main_restaurantList_sample(id, name, fee, num) {\n  const backgroundColor_odd = colorPack.highlight_dark\n  const backgroundColor_even = colorPack.highlight_light\n  var myBackgroundColor\n  if(Number(num) %2 == 0){\n    myBackgroundColor = backgroundColor_even\n  }\n  else{\n    myBackgroundColor = backgroundColor_odd\n  }\n // return \n  return (\n    <TouchableOpacity style={[styles.restaurantList,{backgroundColor:myBackgroundColor}]} key={id}\n    disabled={true}\n    >\n\n      <Text style={[styles.normalText, styles.restaurantName]}>{name}</Text>\n\n      <Text style={[styles.deactivatedText, styles.restaurantFee]}>{`${fee}`}</Text>\n      \n    </TouchableOpacity>\n  );  // return\n}\n\nexport {Main_restaurantList, Main_restaurantList_sample}","// @ts-check\nimport { initSchema } from '@aws-amplify/datastore';\nimport { schema } from './schema';\n\n\n\nconst { Member, Restaurant, Place } = initSchema(schema);\n\nexport {\n  Member,\n  Restaurant,\n  Place\n};","export const schema = {\n    \"models\": {\n        \"Member\": {\n            \"name\": \"Member\",\n            \"fields\": {\n                \"id\": {\n                    \"name\": \"id\",\n                    \"isArray\": false,\n                    \"type\": \"ID\",\n                    \"isRequired\": true,\n                    \"attributes\": []\n                },\n                \"username\": {\n                    \"name\": \"username\",\n                    \"isArray\": false,\n                    \"type\": \"ID\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"email\": {\n                    \"name\": \"email\",\n                    \"isArray\": false,\n                    \"type\": \"String\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"menu\": {\n                    \"name\": \"menu\",\n                    \"isArray\": true,\n                    \"type\": \"String\",\n                    \"isRequired\": false,\n                    \"attributes\": [],\n                    \"isArrayNullable\": true\n                },\n                \"price\": {\n                    \"name\": \"price\",\n                    \"isArray\": false,\n                    \"type\": \"Int\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"restaurantID\": {\n                    \"name\": \"restaurantID\",\n                    \"isArray\": false,\n                    \"type\": \"ID\",\n                    \"isRequired\": true,\n                    \"attributes\": []\n                },\n                \"phone_number\": {\n                    \"name\": \"phone_number\",\n                    \"isArray\": false,\n                    \"type\": \"String\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"createdAt\": {\n                    \"name\": \"createdAt\",\n                    \"isArray\": false,\n                    \"type\": \"AWSDateTime\",\n                    \"isRequired\": false,\n                    \"attributes\": [],\n                    \"isReadOnly\": true\n                },\n                \"updatedAt\": {\n                    \"name\": \"updatedAt\",\n                    \"isArray\": false,\n                    \"type\": \"AWSDateTime\",\n                    \"isRequired\": false,\n                    \"attributes\": [],\n                    \"isReadOnly\": true\n                }\n            },\n            \"syncable\": true,\n            \"pluralName\": \"Members\",\n            \"attributes\": [\n                {\n                    \"type\": \"model\",\n                    \"properties\": {}\n                },\n                {\n                    \"type\": \"key\",\n                    \"properties\": {\n                        \"name\": \"byRestaurant\",\n                        \"fields\": [\n                            \"restaurantID\"\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"auth\",\n                    \"properties\": {\n                        \"rules\": [\n                            {\n                                \"allow\": \"public\",\n                                \"operations\": [\n                                    \"create\",\n                                    \"update\",\n                                    \"delete\",\n                                    \"read\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n        \"Restaurant\": {\n            \"name\": \"Restaurant\",\n            \"fields\": {\n                \"id\": {\n                    \"name\": \"id\",\n                    \"isArray\": false,\n                    \"type\": \"ID\",\n                    \"isRequired\": true,\n                    \"attributes\": []\n                },\n                \"name\": {\n                    \"name\": \"name\",\n                    \"isArray\": false,\n                    \"type\": \"String\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"fee\": {\n                    \"name\": \"fee\",\n                    \"isArray\": false,\n                    \"type\": \"Int\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"url\": {\n                    \"name\": \"url\",\n                    \"isArray\": false,\n                    \"type\": \"String\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"makerID\": {\n                    \"name\": \"makerID\",\n                    \"isArray\": false,\n                    \"type\": \"ID\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"placeID\": {\n                    \"name\": \"placeID\",\n                    \"isArray\": false,\n                    \"type\": \"ID\",\n                    \"isRequired\": true,\n                    \"attributes\": []\n                },\n                \"Members_in_restaurant\": {\n                    \"name\": \"Members_in_restaurant\",\n                    \"isArray\": true,\n                    \"type\": {\n                        \"model\": \"Member\"\n                    },\n                    \"isRequired\": false,\n                    \"attributes\": [],\n                    \"isArrayNullable\": true,\n                    \"association\": {\n                        \"connectionType\": \"HAS_MANY\",\n                        \"associatedWith\": \"restaurantID\"\n                    }\n                },\n                \"num_members\": {\n                    \"name\": \"num_members\",\n                    \"isArray\": false,\n                    \"type\": \"Int\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"account\": {\n                    \"name\": \"account\",\n                    \"isArray\": false,\n                    \"type\": \"String\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"isFinishRecruiting\": {\n                    \"name\": \"isFinishRecruiting\",\n                    \"isArray\": false,\n                    \"type\": \"Boolean\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"createdAt\": {\n                    \"name\": \"createdAt\",\n                    \"isArray\": false,\n                    \"type\": \"AWSDateTime\",\n                    \"isRequired\": false,\n                    \"attributes\": [],\n                    \"isReadOnly\": true\n                },\n                \"updatedAt\": {\n                    \"name\": \"updatedAt\",\n                    \"isArray\": false,\n                    \"type\": \"AWSDateTime\",\n                    \"isRequired\": false,\n                    \"attributes\": [],\n                    \"isReadOnly\": true\n                }\n            },\n            \"syncable\": true,\n            \"pluralName\": \"Restaurants\",\n            \"attributes\": [\n                {\n                    \"type\": \"model\",\n                    \"properties\": {}\n                },\n                {\n                    \"type\": \"key\",\n                    \"properties\": {\n                        \"name\": \"byPlace\",\n                        \"fields\": [\n                            \"placeID\"\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"auth\",\n                    \"properties\": {\n                        \"rules\": [\n                            {\n                                \"allow\": \"public\",\n                                \"operations\": [\n                                    \"create\",\n                                    \"update\",\n                                    \"delete\",\n                                    \"read\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n        \"Place\": {\n            \"name\": \"Place\",\n            \"fields\": {\n                \"id\": {\n                    \"name\": \"id\",\n                    \"isArray\": false,\n                    \"type\": \"ID\",\n                    \"isRequired\": true,\n                    \"attributes\": []\n                },\n                \"latitude\": {\n                    \"name\": \"latitude\",\n                    \"isArray\": false,\n                    \"type\": \"Float\",\n                    \"isRequired\": true,\n                    \"attributes\": []\n                },\n                \"longitude\": {\n                    \"name\": \"longitude\",\n                    \"isArray\": false,\n                    \"type\": \"Float\",\n                    \"isRequired\": true,\n                    \"attributes\": []\n                },\n                \"name\": {\n                    \"name\": \"name\",\n                    \"isArray\": false,\n                    \"type\": \"String\",\n                    \"isRequired\": true,\n                    \"attributes\": []\n                },\n                \"Restaurants_in_a_place\": {\n                    \"name\": \"Restaurants_in_a_place\",\n                    \"isArray\": true,\n                    \"type\": {\n                        \"model\": \"Restaurant\"\n                    },\n                    \"isRequired\": false,\n                    \"attributes\": [],\n                    \"isArrayNullable\": true,\n                    \"association\": {\n                        \"connectionType\": \"HAS_MANY\",\n                        \"associatedWith\": \"placeID\"\n                    }\n                },\n                \"makerID\": {\n                    \"name\": \"makerID\",\n                    \"isArray\": false,\n                    \"type\": \"ID\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"num_restaurants\": {\n                    \"name\": \"num_restaurants\",\n                    \"isArray\": false,\n                    \"type\": \"Int\",\n                    \"isRequired\": false,\n                    \"attributes\": []\n                },\n                \"createdAt\": {\n                    \"name\": \"createdAt\",\n                    \"isArray\": false,\n                    \"type\": \"AWSDateTime\",\n                    \"isRequired\": false,\n                    \"attributes\": [],\n                    \"isReadOnly\": true\n                },\n                \"updatedAt\": {\n                    \"name\": \"updatedAt\",\n                    \"isArray\": false,\n                    \"type\": \"AWSDateTime\",\n                    \"isRequired\": false,\n                    \"attributes\": [],\n                    \"isReadOnly\": true\n                }\n            },\n            \"syncable\": true,\n            \"pluralName\": \"Places\",\n            \"attributes\": [\n                {\n                    \"type\": \"model\",\n                    \"properties\": {}\n                },\n                {\n                    \"type\": \"auth\",\n                    \"properties\": {\n                        \"rules\": [\n                            {\n                                \"allow\": \"public\",\n                                \"operations\": [\n                                    \"create\",\n                                    \"update\",\n                                    \"delete\",\n                                    \"read\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    },\n    \"enums\": {},\n    \"nonModels\": {},\n    \"version\": \"3950013f7e56c76964ac7fc260914bf0\"\n};","import { colorPack, styles, width } from '../style/style';\nimport {View, ActivityIndicator, Text, Image} from 'react-native-web';\nimport {useState, useEffect} from 'react';\nimport * as Location from 'expo-location';\n\n\n\nexport default function Loading_page({route, navigation}){\n\n\n  return ( \n      <View style={[styles.container, {justifyContent:'center'}]}>\n\n\n      <View style={{alignContent:'center', justifyContent:'center'}}>\n        <Image source={require('../../assets/icon.png')} style={{width:width*0.8, height:width*0.8, marginLeft:width*0.1}} />\n      </View>\n\n      <View style={styles.header}>\n      <Text style={styles.highlightText}>\n          {'배달 앤빵 정보를 불러오는 중입니다.'}\n      </Text>\n    </View>\n\n\n      <ActivityIndicator size=\"large\" animating={true} color={colorPack.text_light} />\n\n\n\n\n      </View>\n  );\n}","import { Auth } from 'aws-amplify';\nimport {View, Text, TouchableOpacity, ScrollView, Modal, TextInput, RefreshControl, SafeAreaView, Alert, KeyboardAvoidingView} from 'react-native-web';\nimport React, {useState, useEffect} from 'react';\nimport { colorPack, map_darkStyle, styles, width, height } from '../style/style';\nimport MapView, { PROVIDER_GOOGLE, Marker } from 'react-native-web-maps';\n// import DialogInput from 'react-native-dialog-input';\nimport {Main_restaurantList, Main_restaurantList_sample} from './main_restaurantList';\nimport  {DataStore} from '@aws-amplify/datastore';\nimport {Restaurant, Place, Member} from '../models';\nimport * as Linking from 'expo-linking';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useFocusEffect } from '@react-navigation/native';\nimport DialogInput from 'react-native-dialog-input';\nimport Loading_page from './loading_page';\nimport * as Location from 'expo-location';\n\n\n\n\nexport default function Main_page({route, navigation}){\n\n\n  const autoLogin = route.params.autoLogin;\n  let user = JSON.parse(route.params.user).attributes;\n  user.username = user.sub\n  const [location, setLocation] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n\n\n  const [errorMsg, setErrorMsg] = useState(null);\n  // const mapRef = createRef();\n\n\n\n  useEffect(() => {\n    getLocation();\n    // console.log('user', user)\n  },[]);\n\n  useFocusEffect(\n    React.useCallback(() => {\n      refreshRestaurantList('userOrder')\n    }, [])\n  )\n\n  // get location\n  const getLocation = async () => {\n    setIsLoading(true);\n    if(autoLogin){\n      Alert.alert('배달앤빵', '현재 위치에 따른 배달 정보를 제공하기 위해\\n사용자의 위치 정보에 접근하려 합니다.\\n동의하시겠습니까?', [\n        {text: '취소', onPress: () => {\n          // console.log('Cancel Pressed')\n          navigation.replace('SignIn');\n        }, style: 'cancel'},\n        {text: '동의', onPress: async() => {\n          let { status_location_permission } = await Location.requestForegroundPermissionsAsync()\n          console.log('위치 정보 access '+status_location_permission);\n          //   나중에 풀어야 함!\n            // if (status_location_permission !== 'granted') {\n            //   alert('Permission to access location was denied');\n            //   // return; \n            // }\n          let _location = await Location.getCurrentPositionAsync({accuracy: Location.Accuracy.Highest});\n          setLocation({\n          latitude: _location.coords.latitude,\n          longitude: _location.coords.longitude,\n          latitudeDelta: 0.003, longitudeDelta: 0.003\n          });\n          setIsLoading(false);\n        }} \n      ])\n    }\n    else{\n      let { status_location_permission } = await Location.requestForegroundPermissionsAsync()\n      console.log('위치 정보 access '+status_location_permission);\n      //   나중에 풀어야 함!\n        // if (status_location_permission !== 'granted') {\n        //   alert('Permission to access location was denied');\n        //   // return; \n        // }\n      let _location = await Location.getCurrentPositionAsync({accuracy: Location.Accuracy.Highest});\n      setLocation({\n      latitude: _location.coords.latitude,\n      longitude: _location.coords.longitude,\n      latitudeDelta: 0.003, longitudeDelta: 0.003\n      });\n      setIsLoading(false);\n    }\n    \n    \n}\n\n\n  const setUser = (user) =>{\n      AsyncStorage.setItem('@user', JSON.stringify(user));\n  }\n  \n  const getUser = async () =>{\n      const user = await AsyncStorage.getItem('@user');\n      return JSON.parse(user);\n  }  \n\n    // refresh\n  const [refreshing, setRefreshing] = useState(false);\n\n\n  const refreshRestaurantList = async (id='refresh') => {\n    // alert('refreshRestaurantList');\n    setRefreshing(true);\n    // console.log('refreshRestaurantList',id==='refresh');\n    // console.log(selectedMarker)\n    await getMarkers()\n    if(id==='refresh'){\n      // console.log('refreshRestaurantList_refresh');\n      await loadRestaurant(selectedMarker.key);\n    }\n    else if(id === 'userOrder'){\n      showUserOrderList();\n      setSelectedMarker({\n        coordinate: {}, // {logitude: 0, latitude: 0}\n        title: '나의 주문',\n        key: 'userOrder',\n      })\n    }\n    else if(id === 'default'){\n      setRestaurantList(restaurantList_sample);\n      setSelectedMarker({\n        coordinate: {}, // {logitude: 0, latitude: 0}\n        title: '',\n        key: 'markers%',\n      })\n\n    }\n    else{\n      // console.log('refreshRestaurantList_with id');\n      await loadRestaurant(id);\n    }\n    // alert('refreshRestaurantList is finished');\n    setRefreshing(false);\n    // setIsLoading(false);\n  }\n\n  const logOut = () => {\n    Alert.alert('배달앤빵','로그아웃을 할까요?',[{text: '로그아웃', onPress: async () => {\n      \n      setUser({});\n      await Auth.signOut();\n      navigation.replace('SignIn')\n\n    }},{text: '취소', onPress: () => {\n    // console.log('Cancel Pressed');\n  }}]);\n  }\n\n  let text = 'Waiting..';\n  if (errorMsg) {\n    text = errorMsg;\n  } \n  else if (location) {\n    text = JSON.stringify(location);\n  }\n  // console.log(location)\n\n  const returnMarker = (data) => {// data should contain id, name, latitude, longitude\n    // console.log('makeMarker')\n    let coordinate = {longitude: data.longitude, latitude: data.latitude};\n    let title = data.name;\n    let key = data.id;\n    let num_restaurants = data.num_restaurants;\n    \n    return (\n      <Marker\n        coordinate={coordinate}\n        title={title}\n        description={`${num_restaurants}개의 음식점`}\n        key={key}\n        onPress={() => {\n          // console.log(title)\n          setSelectedMarker(\n            {\n              coordinate: coordinate,\n              title: title,\n              key: key,\n            }\n          );\n          loadRestaurant(key);\n        }}\n      />\n    );\n  }\n\n//MARKER\n  // current markers\n  const [markers, setMarkers] = useState([]); // use makeMarker(data)\n\n  async function getMarkers() {\n    let _markerList = []\n    // console.log('location', location);\n    try {\n      const models = await DataStore.query(Place, place => {\n      });\n      // console.log(models)\n      models.forEach((model, index) => {\n  \n        _markerList.push(returnMarker(model))\n  \n        if(index == models.length-1){\n          setMarkers(_markerList);\n        }\n      });\n    } \n    \n    catch (error) {\n      return(error)\n    }\n\n\n  }\n\n  // get log pressed location and add marker\n  const [newmarkerCoordinate, setNewmarkerCoordinate] = useState(null);\n\n  // make new marker\n  async function makeNewMarker(coordinate, title){\n\n    await DataStore.save(\n      new Place({\n      \"latitude\": coordinate.latitude,\n      \"longitude\": coordinate.longitude,\n      \"name\": title,\n      \"Restaurants_in_a_place\": [],\n      \"makerID\": user.username,\n      \"num_restaurants\":0\n      })\n    );\n    \n    refreshRestaurantList();\n    // console.log('saved');\n  }\n\n// selected marker info\n  const [selectedMarker, setSelectedMarker] = useState({\n    coordinate: {}, // {logitude: 0, latitude: 0}\n    title: '',\n    key: 'markers%',\n  });\n\n // get marker name dialog\n  const [dialogVisible_marker, setDialogVisible_marker] = useState(false); \n\n\n\n\n// RESTAURANT LIST\nconst restaurantList_sample = [\n  Main_restaurantList_sample('placeholder1','장소 추가', '지도 길게 누르기', '0'),\n  Main_restaurantList_sample('placeholder2','장소 선택', '핀 누르기', '1'),\n]\n\n  const [restaurantList, setRestaurantList] = useState(restaurantList_sample);\n\n\n  // get restaurant list\n  const [dialogVisible_restaurant, setDialogVisible_restaurant] = useState(false);\n\n  // const [newRestaurant, setNewRestaurant] = useState({});\n  const [newRestaurant_name, setNewRestaurant_name] = useState(null);\n  const [newRestaurant_fee, setNewRestaurant_fee] = useState(0);\n  const [newRestaurant_url, setNewRestaurant_url] = useState(null);\n  const [newRestaurant_account, setNewRestaurant_account] = useState(user.address);\n\n  // make new restaurant\n  async function saveNewRestaurant(placeID){\n      \n    ({\"name\": newRestaurant_name,\"fee\": newRestaurant_fee,\"url\": newRestaurant_url,\"placeID\": placeID,})\n    // amplify\n    const restaurant = await DataStore.save(\n      new Restaurant({\n      \"name\": newRestaurant_name,\n      \"fee\": (newRestaurant_fee==null)?0:parseInt(newRestaurant_fee),\n      \"url\": newRestaurant_url,\n      \"placeID\": placeID,\n      \"makerID\": user.username,\n      \"num_members\":1,\n      \"account\": newRestaurant_account,\n      \"isFinishRecruiting\": false,\n    }));\n    setNewRestaurant_name(null);\n    setNewRestaurant_fee(null);\n    setNewRestaurant_url(null);\n    /* Models in DataStore are immutable. To update a record you must use the copyOf function\n    to apply updates to the item’s fields rather than mutating the instance directly */\n    const CURRENT_ITEM = await DataStore.query(Place, placeID);\n    const place = await DataStore.save(Place.copyOf(CURRENT_ITEM, updated => {\n      // Update the values on {item} variable to update DataStore entry\n      updated.num_restaurants = updated.num_restaurants + 1;\n    }));\n\n    // 자기 자신을 음식점에 추가\n    await DataStore.save(\n      new Member({\n          \"username\": user.username,\n          \"email\": user.email,\n          \"phone_number\": user.phone_number,\n          \"menu\": ['메뉴를 추가해주세요'], \n          \"fee\":Number(0),\n          \"restaurantID\": restaurant.id,\n      })\n    );\n\n    navigation.navigate('Restaurant', {user:user, restaurant:restaurant, place:place})\n\n  }\n\n  // load restaurant\n  async function loadRestaurant(placeID){\n    // console.log(placeID)\n    const place = await DataStore.query(Place, placeID);\n\n    const models = await DataStore.query(Restaurant, (q) => q.placeID('eq',placeID));\n    // console.log(models);\n    \n\n    let _restaurantList = []\n\n    models.sort((a,b) => {\n      const price1 = a.fee/a.num_members;\n      const price2 = b.fee/b.num_members;\n      return price1 - price2;\n    }).forEach( async(model, index) => {\n\n      _restaurantList.push(\n        Main_restaurantList(\n          user,\n          model,\n          index,\n          navigation,\n          place,\n          setRestaurantList,\n          restaurantList,        \n        )\n      )\n    });\n    setRestaurantList(_restaurantList);\n  }\n\n  const showUserOrderList = async() => {\n    const members = await DataStore.query(Member, (q) => q.username('eq',user.username));\n    //console.log(members);\n    var _orderList = []\n    if(members){\n      members.forEach( async(member, index) => {\n\n        let rest = await DataStore.query(Restaurant, member.restaurantID);\n        let place = await DataStore.query(Place, rest.placeID);\n  \n        //console.log('rest', rest);\n        //console.log('place', place);\n  \n        _orderList.push(Main_restaurantList(\n          user,\n          rest,\n          index,\n          navigation,\n          place,\n          setRestaurantList,\n          restaurantList,\n        ))\n  \n        if(index == members.length-1){\n          setSelectedMarker({\n            coordinate: {}, // {logitude: 0, latitude: 0}\n            title: '나의 주문',\n            key: 'userOrder',\n          })\n          setRestaurantList(_orderList);\n          //console.log('orderList', _orderList);\n        }\n      })\n    }\n    else{\n      setSelectedMarker({\n        coordinate: {}, // {logitude: 0, latitude: 0}\n        title: '',\n        key: 'markers%',\n      })\n      setRestaurantList(restaurantList_sample);\n    }\n    \n  }\n\n // return \n  return (\n    (isLoading)?\n    <Loading_page/>:\n\n    <View style={styles.container}>\n\n      <DialogInput\n        isDialogVisible={dialogVisible_marker}\n        title={\"이곳에 핀 추가하기\"}\n        message={'이 장소의 이름을 입력하세요'}\n        dialogStyle={{\n          borderRadius: width*50/1000,\n          backgroundColor: colorPack.text_light,\n          padding: width*20/1000,\n        }}\n        textInputProps={{\n          autoCorrect: false,\n          autoCapitalize: false,\n          maxLength: 10,\n        }}\n\n        submitText={'저장'}\n        cancelText={'닫기'}\n        submitInput={(title) => {\n          if(title){\n          makeNewMarker(newmarkerCoordinate, title);\n          setDialogVisible_marker(false);\n          }\n          else{\n            setDialogVisible_marker(false);\n          }\n        }}\n        closeDialog={() => {\n          setDialogVisible_marker(false);\n        }}\n      />\n      \n\n\n      <Modal animationType='fade'\n      transparent={false}\n      visible={dialogVisible_restaurant}\n      onRequestClose={() => {\n        setDialogVisible_restaurant(false);\n        setNewRestaurant_fee(null);\n        setNewRestaurant_name(null);\n        setNewRestaurant_url(null);\n      }}\n      >\n\n      <KeyboardAvoidingView behavior='padding' keyboardVerticalOffset={height*50/2000}\n      style={styles.restaurantInfoModal}>\n      <View style={[styles.header, {flexDirection:'row', justifyContent:'space-between', opacity:0.5}]}>\n\n      <View style={{width:width*0.25}}>\n        <TouchableOpacity\n          onPress={() => {\n            logOut()\n          }}\n          disabled = {true}\n        >\n        <Text style={styles.normalText} lineBreakMode='tail' numberOfLines={1}>{user.email.split('@')[0]}</Text>\n        </TouchableOpacity>    \n      </View>\n\n      <TouchableOpacity style={{width:width*0.25}}\n          onPress={async() => {\n            await getMarkers();\n            setSelectedMarker({\n              coordinate: {}, // {logitude: 0, latitude: 0}\n              title: '',\n              key: 'markers%',\n            });\n            setRestaurantList(restaurantList_sample)\n          }}\n          disabled = {true}\n      >\n        <Text style={styles.highlightText} lineBreakMode='tail' numberOfLines={1}>{'배달앤빵'}</Text>\n      </TouchableOpacity>\n\n      <View style={{width:width*0.25}}>\n        <TouchableOpacity\n          onPress={() => {\n            showUserOrderList();\n          }}\n          disabled = {true}\n        >\n        <Text style={styles.normalText} lineBreakMode='tail' numberOfLines={1}>{`나의 주문`}</Text>\n        </TouchableOpacity>    \n      </View>\n\n    </View>\n\n    <View style={styles.header}>\n    <Text style={[styles.highlightText]}>{`음식점을 \\\"${selectedMarker.title}\\\"에 추가합니다.`}</Text>\n    </View>\n\n\n    <ScrollView>\n    <View style={[styles.mapContainer,{height:500*height/2000}]}>\n\n    <MapView\n    provider={PROVIDER_GOOGLE}\n    customMapStyle={map_darkStyle}\n    style={[styles.map, {height:500*height/2000}]}\n    initialRegion={location}\n    showsMyLocationButton={true}\n    showsUserLocation={true}\n    loadingEnabled={true}\n    zoomEnabled={true}\n    rotateEnabled={true}\n    onLongPress={(e) => {\n      setNewmarkerCoordinate(e.nativeEvent.coordinate);\n      setDialogVisible_marker(true);\n    }}\n    >\n    {markers.filter((marker) => marker.key === selectedMarker.key)}\n    </MapView>\n\n    </View>\n\n        \n        <View style={styles.restaurantInfoContainerModal}>\n          \n\n          <View style={styles.getRestaurantInfoModal}>\n          <TouchableOpacity\n            onPress={() => {\n              Linking.openURL('https://baeminkr.onelink.me/XgL8/baemincom');\n          }}\n            disabled={newRestaurant_url != null}\n            \n          >\n          <Text style={[styles.normalText]}>{newRestaurant_url?'배달의 민족 링크':'배달의 민족으로 이동하기'}</Text>\n          </TouchableOpacity>\n            \n            <TextInput\n            style={styles.textInputBox}\n            placeholder={'배달의 민족 URL 붙여넣기'}\n            placeholderTextColor={colorPack.deactivated}\n            value={newRestaurant_url}\n            onChangeText={(text) => readClipboard(setNewRestaurant_name, setNewRestaurant_url, text)}\n            >            \n            </TextInput>\n          </View>\n\n          <View style={styles.getRestaurantInfoModal}>\n            <Text style={[styles.normalText]}>{'음식점 이름'}</Text>\n            <TextInput style={styles.textInputBox}\n            value={newRestaurant_name}\n            onChangeText={(text) =>\n              setNewRestaurant_name(text)\n            }\n            placeholder='URL을 붙여넣으면 자동으로 입력됩니다.'\n            placeholderTextColor={colorPack.deactivated}\n            showSoftInputOnFocus={false}\n            editable={false}\n            />\n          </View>\n\n          <View style={styles.getRestaurantInfoModal}>\n            <Text style={[styles.normalText]}>{'배달료(원)'}</Text>\n            <TextInput style={styles.textInputBox}\n            onChangeText={(text) => setNewRestaurant_fee(text)}\n            keyboardType='numeric'\n            placeholder='0'\n            placeholderTextColor={colorPack.deactivated}            \n            />\n          </View>\n          \n\n          <View style={styles.getRestaurantInfoModal}>\n            <TouchableOpacity\n            onPress={() => {\n              Alert.alert('배달앤빵','카카오톡 프로필 상단 우측의 QR코드 버튼을 누른 뒤 QR코드 밑에 있는 링크 아이콘을 클릭하세요.')\n           }}\n            disabled={newRestaurant_account != null}>\n\n            <Text style={[styles.normalText,{textAlign:'center'}]}>{newRestaurant_account?'입금받을 본인 계좌':' 카카오페이 송금주소를 복사하는 방법 보기.'}</Text>\n            </TouchableOpacity>\n            <TextInput style={styles.textInputBox}\n            onChangeText={(text) => setNewRestaurant_account(text)}\n            placeholder= {user.address}\n            placeholderTextColor={colorPack.text_light}\n            editable={newRestaurant_account == null}  \n            onKeyPress={(e) => {\n              if (e.nativeEvent.key === 'return') {\n                let placeID = selectedMarker.key;\n                setDialogVisible_restaurant(false);\n                saveNewRestaurant(placeID);\n              }\n            }}\n            />\n\n          </View>\n\n          <View style={styles.buttonContainerModal}>\n            <TouchableOpacity\n              style={styles.modalButton}\n              onPress={() => \n                { setDialogVisible_restaurant(false);\n                  setNewRestaurant_fee(null);\n                  setNewRestaurant_name(null);\n                  setNewRestaurant_url(null);\n                }}>\n              <Text style={styles.highlightText}>{'취소'}</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity\n              style={styles.modalButton}\n              onPress={() => \n                { \n                  let placeID = selectedMarker.key;\n                  setDialogVisible_restaurant(false);\n                  saveNewRestaurant(placeID);\n                }}>\n              <Text style={styles.highlightText}>{'추가하기'}</Text>\n            </TouchableOpacity>\n          </View>\n          \n        </View>\n        </ScrollView>\n        </KeyboardAvoidingView>\n        \n\n      </Modal>\n\n\n\n      <View style={[styles.header, {flexDirection:'row', justifyContent:'space-between'}]}>\n\n        <View style={{width:width*0.25}}>\n          <TouchableOpacity\n            onPress={() => {\n              logOut()\n            }}\n          >\n          <Text style={styles.normalText} lineBreakMode='tail' numberOfLines={1}>{user.email.split('@')[0]}</Text>\n          </TouchableOpacity>    \n        </View>\n\n        <TouchableOpacity style={{width:width*0.25}}\n            onPress={async() => {\n              await getMarkers();\n              setSelectedMarker({\n                coordinate: {}, // {logitude: 0, latitude: 0}\n                title: '',\n                key: 'markers%',\n              });\n              setRestaurantList(restaurantList_sample)\n            }}\n        >\n          <Text style={styles.highlightText} lineBreakMode='tail' numberOfLines={1}>{'배달앤빵'}</Text>\n        </TouchableOpacity>\n\n        <View style={{width:width*0.25}}>\n          <TouchableOpacity\n            onPress={() => {\n              showUserOrderList();\n            }}\n          >\n          <Text style={styles.normalText} lineBreakMode='tail' numberOfLines={1}>{`나의 주문`}</Text>\n          </TouchableOpacity>    \n        </View>\n\n      </View>\n\n      \n      <View style={styles.mapContainer}>\n\n          <MapView\n          provider={PROVIDER_GOOGLE}\n          customMapStyle={map_darkStyle}\n          style={styles.map}\n          initialRegion={location}\n          showsMyLocationButton={true}\n          showsUserLocation={true}\n          loadingEnabled={true}\n          zoomEnabled={true}\n          rotateEnabled={true}\n          onLongPress={(e) => {\n            setNewmarkerCoordinate(e.nativeEvent.coordinate);\n            setDialogVisible_marker(true);\n          }}\n          >\n          {markers}\n          </MapView>\n\n      </View>\n\n\n      <View style={styles.restaurantContainer}>\n\n\n          <View style={styles.locationInfoContainer}>\n              <Text style={styles.highlightText}>\n                {selectedMarker.title}\n              </Text>\n              <TouchableOpacity\n                style={styles.locationInfoButton}\n                onPressOut={() => {\n                  {setDialogVisible_restaurant(true);}\n                }}\n                disabled={selectedMarker.key==='markers%'||selectedMarker.key==='userOrder'}\n              >\n                <Text style={styles.normalText}>\n                {selectedMarker.key==='markers%'?'장소를 먼저 선택하세요':(selectedMarker.key ==='userOrder'?'':'이곳으로 배달할 음식점 추가하기')}\n                </Text>\n              </TouchableOpacity>\n          </View>\n\n\n          <SafeAreaView>\n          <ScrollView style={styles.restaurantListContainer}\n          refreshControl={\n            <RefreshControl\n              refreshing={refreshing}\n              onRefresh={()=>{\n                if(selectedMarker.key =='userOrder'){\n                  refreshRestaurantList('userOrder')\n                }\n                else if(selectedMarker.key =='markers%'){\n                  setRestaurantList(restaurantList_sample)\n                }\n                else{\n                  refreshRestaurantList('refresh');\n                }\n\n                // console.log('refresh')\n              }\n              }\n            />\n            }\n          >\n            {restaurantList}\n          </ScrollView>          \n          </SafeAreaView>\n\n\n\n\n      </View>\n    </View>\n  )\n\n  }// return}\n\nconst readClipboard = async (setNewRestaurant_name, setNewRestaurant_url, innerText='') => {\n  // const clipboardText = await Clipboard.getStringAsync('plainText');\n  //클립보드의 내용을 가져온다 \n  const clipboardText = innerText\n  //console.log(clipboardText);\n\n\n  const UrlFormat = /^\\'(.*)\\' 어때요\\? 배달의민족 앱에서 확인해보세요.  https:\\/\\/baemin.me\\/(.*){1,}$/g\n\n  const restaurantTitleFormat = /\\'.*\\'/g\n  const restaurantUrlFormat = /https:\\/\\/baemin.me\\/(.*){1,}/g\n\n  const restaurantTitle = clipboardText.match(restaurantTitleFormat);\n  const restaurantUrl = clipboardText.match(restaurantUrlFormat);\n\n  //console.log(clipboardText, restaurantTitle, restaurantUrl);\n  if(restaurantTitle&&restaurantUrl){ \n  //클립보드에서 가져온 문자열에 http 가 포함되어있으면 링크로 인식해 저장\n    setNewRestaurant_url(restaurantUrl[0]);\n    setNewRestaurant_name(restaurantTitle[0].substring(1, restaurantTitle[0].length-1));\n  }\n  else{\n      setNewRestaurant_url('');\n      setNewRestaurant_name('');\n      if(clipboardText){\n          Alert.alert('배달앤빵', `현재 복사된 링크는 배달의민족 주소가 아닙니다!`, [{text: '확인'}]);\n      }\n      else{\n          Alert.alert('배달앤빵','배달의민족 주소를 먼저 붙여넣어 주세요.',[{text: '확인'}])\n      }\n\n  }\n};\n\n","import { Auth } from '@aws-amplify/auth';\nimport { useEffect, useState } from 'react';\nimport { TextInput, TouchableOpacity, View, Text, Alert, ScrollView, Keyboard, Linking, KeyboardAvoidingView } from 'react-native-web';\nimport { styles, height, width, colorPack } from '../style/style';\n\n// async function sendVerificationCode(email, password, setVerification_code_sended) {\n    \n//     try {\n//         const { user } = await Auth.signUp({\n//             username: email,\n//             password: password,\n//             attributes: {\n//                 email:email,          // optional\n//                 phone_number:'',   // optional - E.164 number convention\n//                 // other custom attributes \n//             }\n//         });\n//         console.log(user);\n//         setVerification_code_sended(true);\n//     } catch (error) {\n//         console.log('error signing up:', error);\n//         if(error.code === 'UsernameExistsException'){\n//             alert('User already exists');\n//             return(false);\n//         }\n//         else if(error.code === 'InvalidParameterException'){\n//             alert('Invalid parameter');\n//             return(false);\n//         }\n//         else if (error.code === 'NetworkError'){\n//             alert('Network error');\n//             return(false);\n//         }\n//     }\n// }\n\nfunction emailTest(setEmail, email){\n    const reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (reg.test(email) === true){\n        setEmail(email);\n        return(true)\n    }\n    else{\n        return(false)\n    }\n}\n\n\nexport default function SignUp_page({navigation}){\n    const [email, setEmail] = useState('');\n    const [isEmailValid, setIsEmailValid] = useState(false);\n    const [phoneNumber , setPhoneNumber] = useState('');\n    const [password1, setPassword1] = useState('');\n    const [password, setPassword] = useState('');\n    const [account, setAccount] = useState('');\n    const [verification_code, setVerification_code] = useState('');\n    const [verification_code_sended, setVerification_code_sended] = useState(false);\n\n    const [sendVerificationCodeBtn, setSendVerificationCodeBtn] = useState(false);\n\n    useEffect(() => {\n        // console.log('email', email);\n        // console.log('password', password);\n        // console.log('verification_code_sended', verification_code_sended);\n        if(!verification_code_sended && (password && email)){\n            // console.log('버튼을 누를 수 있습니다.');\n            setSendVerificationCodeBtn(true);\n        }\n        else{\n            setSendVerificationCodeBtn(false);\n        }\n    },[verification_code_sended, password, email]);\n\n\n    const sendVerificationCode= async() =>{\n    \n        try {\n            const { user } = await Auth.signUp({\n                username: email,\n                password: password,\n                attributes: {\n                    email:email,          // optional\n                    phone_number:'+82'+phoneNumber.substring(1),   // optional - E.164 number convention\n                    // other custom attributes \n                    address:account,\n                }\n            });\n            // console.log(user);\n            setVerification_code_sended(true);\n        } catch (error) {\n            // console.log('error signing up:', error);\n            if(error.code === 'UsernameExistsException'){\n                Alert.alert('배달앤빵','이미 존재하는 이메일입니다.',[{text:'확인'}]);\n                return(false);\n            }\n            else if(error.code === 'InvalidParameterException'){\n                Alert.alert('배달앤빵','잘못된 이메일입니다.',[{text:'확인'}]);\n                return(false);\n            }\n            else if (error.code === 'NetworkError'){\n                Alert.alert('배달앤빵','네트워크 오류입니다.',[{text:'확인'}]);\n                return(false);\n            }\n        }\n    }\n\n    const confirmSignUp = async() => {\n        try {\n          await Auth.confirmSignUp(email, verification_code);\n          Alert.alert('배달앤빵','회원가입이 완료되었습니다.',[{text:'확인'}]);\n          navigation.navigate('SignIn');\n          return(true);\n        } catch (error) {\n            // console.log('error confirming sign up', error);\n            if (error === 'NetworkError'){\n                Alert.alert('배달앤빵','네트워크 오류입니다.',[{text:'확인'}]);\n                return(false);\n            }\n            else if (error === 'CodeMismatchException'){\n                Alert.alert('배달앤빵','코드가 일치하지 않습니다.',[{text:'확인'}]);\n                return(false);\n            }\n        }\n    }\n    \n\n\n\n    return(\n        <View style={styles.container}>\n            <View style={styles.header}>\n                <Text style={styles.highlightText}>\n                    {'배달앤빵 회원가입'}\n                </Text>            \n            </View>\n\n            <KeyboardAvoidingView behavior='padding' keyboardVerticalOffset={height*50/2000}\n            style={{flex:1}}\n            >\n            <ScrollView>\n            <View>\n\n            \n            <View style={{marginTop:height*50/2000, height:height*180/2000}}>\n                <Text style={styles.highlightText}>\n                {'아이디(이메일)'}\n                </Text>\n                <TextInput \n                    keyboardType='email-address'\n                    style={[styles.textInputBox, styles.normalText]}\n                    onChangeText={(email) => {\n                        setIsEmailValid(emailTest(setEmail, email))\n                    }}\n                />\n            </View>\n            <View style={{marginTop:height*50/2000, height:height*180/2000}}>\n                <Text style={styles.highlightText}>\n                {'전화번호'}\n                </Text>\n                <TextInput \n                    keyboardType='phone-pad'\n                    style={[styles.textInputBox, styles.normalText]}\n                    onChangeText={(num) => {\n                        setPhoneNumber(num)\n                    }}\n                    placeholderTextColor={colorPack.deactivated}\n                    placeholder={'01012345678'}\n                />\n            </View>\n\n            <View style={{marginTop: height*50/2000,height:height*180/2000}}>\n                <Text style={styles.highlightText}>\n                비밀번호\n                </Text>\n                <TextInput \n                    secureTextEntry={true}\n                    keyboardType='default'\n                    style={[styles.textInputBox, styles.normalText]}\n                    maxLength={20}\n                    onChangeText={(pw) => {\n                            const reg = /^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{6,20}$/;\n                            if(reg.test(pw)){\n                                setPassword1(pw)\n                            }\n                            else{\n                                setPassword1('')\n                            }\n                        }\n                    }\n                />\n            </View>\n\n            <View style={{marginTop: height*50/2000,height:(password1)?height*180/2000:0}}>\n                <Text style={(password===password1)?styles.highlightText:styles.deactivatedText}>\n                {(password===password1)?'비밀번호 일치':'비밀번호 불일치'}\n                </Text>\n                <TextInput \n                    secureTextEntry={true}\n                    keyboardType='default'\n                    style={(password1)?[styles.textInputBox, styles.normalText]:{height:0}}\n                    maxLength={20}\n                    onChangeText={(pw) => {\n                        if(pw === password1){\n                            setPassword(pw)\n                        }\n                        else{\n                            setPassword('')\n                        }\n                    }}\n                    editable={(password1)?true:false}\n                />\n            </View>\n\n            <View style={{marginTop:height*50/2000, height:height*260/2000}}>\n            <TouchableOpacity\n                    onPress={()=>{\n                        Alert.alert('배달앤빵','카카오톡 프로필 상단 우측의 QR코드 버튼을 누른 뒤 QR코드 밑에 있는 링크 아이콘을 클릭하세요.');\n                    }}\n            >\n                <Text style={styles.highlightText}>\n                {!account?'계좌번호 또는 카카오페이 송금코드\\n클릭해서 카카오페이 송금코드 확인':'계좌번호'}\n                </Text>           \n            </TouchableOpacity>\n\n            <TextInput\n                keyboardType='default'\n                style={[styles.textInputBox, styles.normalText]}\n                onChangeText={(account) => {\n                    setAccount(account)\n                }}\n                numberOfLines={(account)?1:2}\n                editable={true}\n                placeholderTextColor={colorPack.deactivated}\n                placeholder={'카카오뱅크 3333047718018\\n또는 카카오페이 송금코드'}\n            />\n            </View>\n\n            \n                \n            <View>\n               \n                <TouchableOpacity\n                onPressOut={() => sendVerificationCode()}\n                disabled={!sendVerificationCodeBtn}\n                style={[styles.goToSignUpInButton, {marginTop:height*100/2000}]}\n                >\n                <Text style={sendVerificationCodeBtn?styles.highlightText:styles.deactivatedText}>\n                {!verification_code_sended?'인증코드 보내기(이메일)':'인증코드를 입력하세요'}\n                </Text>\n                </TouchableOpacity>\n                <TextInput\n                    autoComplete='off'\n                    keyboardType='number-pad'\n                    style={[styles.textInputBox, styles.normalText]}\n                    maxLength={6}\n                    onChangeText={(verification_code) => {setVerification_code(verification_code)\n                            if (verification_code.length === 6){\n                                Keyboard.dismiss();\n                            }\n                        }\n                    }\n                    editable={verification_code_sended}\n                />\n            </View>\n            <TouchableOpacity\n            onPressOut={() => confirmSignUp()\n            }\n            disabled={!verification_code}\n            style={[styles.goToSignUpInButton]}\n            >\n            <Text style={styles.highlightText}>\n            {'회원가입'}\n            </Text>\n            </TouchableOpacity>\n            </View>\n            </ScrollView>\n            </KeyboardAvoidingView>\n\n        </View>\n    )\n}","import { Auth } from '@aws-amplify/auth';\nimport { useEffect, useState } from 'react';\nimport { TextInput, TouchableOpacity, View, Text, Alert, ScrollView, KeyboardAvoidingView, Image } from 'react-native-web';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { styles, width, height } from '../style/style';\n\n\nfunction emailTest(email){\n    const reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (reg.test(email) === true){\n        return(true)\n    }\n    else{\n        return(false)\n    }\n}\n\nasync function saveLoginInfo(email='', password=''){\n    const loginInfo = {\n        email: email,\n        password: password\n    }\n    await AsyncStorage.setItem('@loginInfoToken', JSON.stringify(loginInfo));\n}\n\n\n\nexport default function SignIn_page({route, navigation}){\n    \n    // 자동로그인 토글\n    const [autoLogin, setAutoLogin] = useState(false);\n\n    const [email, setEmail] = useState('');\n    const [isEmailValid, setIsEmailValid] = useState(false);\n    const [password, setPassword] = useState('');\n\n    useEffect(() => {\n        //이거 주석 달면 자동로그인 안됨\n        if(autoLogin){\n            // console.log('자동로그인 실행')\n            loginFirst()\n        }\n        else{\n            // console.log('자동로그인 안실행')\n        }\n    }, []);\n\n    const setUser = (user) =>{\n        AsyncStorage.setItem('@user', JSON.stringify(user));\n    }\n\n    const getUser = async () =>{\n        const user = await AsyncStorage.getItem('@user');\n        return JSON.parse(user);\n    }\n\n    const loginFirst = async () => {\n    let value = null\n    try {\n        await AsyncStorage.getItem('@loginInfoToken').then(_value => {\n            value = JSON.parse(_value);\n            // console.log(value);\n            if(value.email && value.password){\n                // console.log('value값이 있어서 바로 로그인합니다.', value);\n                setEmail(value.email);\n                setPassword(value.password);\n                signIn(value.email, value.password);\n            }\n            else{\n                // console.log('value값이 없어서 로그인을 진행합니다.');\n            }\n        })\n    } catch (error) {\n            // console.log(err);\n            value = null\n            // console.log('value값이 없어서 로그인을 진행합니다.');\n    }}\n\n\n    const signIn = async(email = email, password = password) => {\n        try {\n            const _user = await Auth.signIn(email, password);\n            // console.log('user', _user);\n            setUser(_user);\n            saveLoginInfo(email, password);\n            navigation.replace('Main', {\n                user: JSON.stringify(_user),\n                autoLogin: autoLogin\n            });\n        } catch (error) {\n            // console.log('error signing in', error);\n            if(error === 'UserNotConfirmedException'){\n                Alert.alert('배달앤빵','허가되지 않은 사용자입니다.', [{text: '확인', onPress: () => {}}]);\n                return(false);\n            }\n            else if(error == 'UserNotFoundException: User does not exist.'){\n                Alert.alert('배달앤빵','등록되지 않은 이메일입니다.', [{text: '확인', onPress: () => {}}]);                \n                return(false);\n            }\n            else if(error == 'NotAuthorizedException: Incorrect username or password.'){\n                Alert.alert('배달앤빵','비밀번호가 일치하지 않습니다.', [{text: '확인', onPress: () => {}}]);\n                return(false);\n            }\n            else if (error == 'NetworkError'){\n                Alert.alert('배달앤빵','네트워크 오류입니다.', [{text: '확인', onPress: () => {}}]);\n                return(false);\n            }\n            else if (error == 'InvalidParameterException: Custom auth lambda trigger is not configured for the user pool.'){\n                Alert.alert('배달앤빵','로그인 오류입니다.', [{text: '확인', onPress: () => {}}]);\n                return(false);\n            }\n            else if (error == 'signing in Error: Pending sign-in attempt already in progress'\n            ){\n                Alert.alert('배달앤빵','이미 로그인중입니다.', [{text: '확인', onPress: () => {}}]);\n                return(false);\n            }\n            else{\n                Alert.alert('배달앤빵','다시 시도해주세요.', [{text: '확인', onPress: () => {}}]);\n                return(false);\n            }\n        }\n    }\n    \n    \n\n    return(\n        <View style={styles.container}>\n            <View style={{alignContent:'center'}}>\n            <Image source={require('../../assets/icon.png')} style={{width:width*0.3, height:width*0.3, marginLeft:width*0.35}} />\n            </View>\n            <View style={styles.header}>\n                <Text style={styles.highlightText}>\n                    {'배달앤빵 로그인'}\n                </Text>\n            </View>\n\n            <KeyboardAvoidingView behavior='padding' keyboardVerticalOffset={height*50/2000}\n            style={{flex:1}}>\n            <ScrollView>\n                <View>\n                    <View style={{marginTop:height*100/2000, height:height*179/2000}}>\n                        <Text style={styles.highlightText}>\n                            {'이메일'}\n                        </Text>\n                        <TextInput \n                            autoComplete='email'\n                            keyboardType='email-address'\n                            style={[styles.textInputBox, styles.normalText]}\n                            onChangeText={(email) => {\n                                setEmail(email);\n                                setIsEmailValid(emailTest(email))\n                            }}\n                            defaultValue={email}\n                            accessibilityLabel = {'email_input'}\n                        />\n                    </View>\n                    <View style={{marginTop: height*100/2000,height:height*179/2000}}>\n                        <Text style={styles.highlightText}>\n                        {'비밀번호'}\n                        </Text>\n                        <TextInput \n                            secureTextEntry={true}\n                            autoComplete='password'\n                            keyboardType='default'\n                            style={[styles.textInputBox, styles.normalText]}\n                            maxLength={20}\n                            onChangeText={(password) => setPassword(password)}\n                            defaultValue={password}\n                            accessibilityLabel = {'password_input'}\n                        />\n                    </View>\n                    \n                    <TouchableOpacity\n                        onPressOut={() => signIn(email, password)}\n                        style={[styles.goToSignUpInButton, {marginTop:height*100/2000}]}\n                        disabled={!isEmailValid&&password.length<=0}\n                    >\n                        <Text style={styles.highlightText}>\n                        {'로그인'}\n                        </Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                    onPressOut={() => navigation.navigate('SignUp')}\n                    style={[styles.goToSignUpInButton,{marginTop:height*200/2000}]}\n                >\n                        <Text style={styles.highlightText}>\n                        {'회원가입'}\n                        </Text>\n                    </TouchableOpacity>\n                </View>\n            </ScrollView>\n            </KeyboardAvoidingView>\n\n            <View style={{top:height*350/2000}}>\n                <Text style={styles.deactivatedText}>\n                    {'presented by UNIST BTS Pseudo Tesla Team'}\n                </Text>       \n            </View>\n            \n        </View>\n    )\n}","import {View, Text, TouchableOpacity, ScrollView, Modal, TextInput, RefreshControl, SafeAreaView, Alert, KeyboardAvoidingView} from 'react-native-web';\nimport {useState, useEffect} from 'react';\nimport  {DataStore} from '@aws-amplify/datastore';\nimport {Restaurant, Place, Member} from '../models';\nimport { styles, colorPack, height, map_darkStyle } from '../style/style';\nimport MapView, { Marker, PROVIDER_GOOGLE } from 'react-native-web-maps';\nimport * as Linking from 'expo-linking';\nimport * as Clipboard from 'expo-clipboard'\nimport * as SMS from 'expo-sms';\n\nexport default function Restaurant_page_auth({route, navigation}){\n    \n    // console.log(route.params.user)\n    const user = route.params.user;//{username: 'test', email: ''}\n    const [restaurant, setRestaurant] = useState(route.params.restaurant);//{makerID: 'test', name: '', fee: 0, num_members: 0, menu: [], isFinishRecruiting: false}\n    const place = route.params.place;//{name: '', latitude: 0, longitude: 0}\n\n    \n    const [isFinishRecruiting, setIsFinishRecruiting] = useState(restaurant.isFinishRecruiting);\n\n    const [member, setMember] = useState(null);\n\n    const [modalVisible, setModalVisible] = useState(false);\n    const [menuList, setMenuList] = useState(null);\n    const [menuPrice, setMenuPrice] = useState(null);\n    const [isRegistered, setIsRegistered] = useState(true);\n\n    const[account, setAccount] = useState(restaurant.account);\n    const[fee, setFee] = useState(restaurant.fee);\n\n    const[refreshing, setRefreshing] = useState(false);\n\n    useEffect(() => {\n        getMembers(); // get member from database\n        //console.log('user', user)\n        //console.log('member', member)\n        //console.log('restaurant', restaurant)\n        //console.log('place', place)\n    }, [isRegistered, modalVisible]);\n    \n\n\n\n    const getMembers = async () => {\n        setRefreshing(true);\n        const members = await DataStore.query(Member, member=>member.restaurantID('eq', restaurant.id));\n        //console.log('members', members)\n        const _membersList = []\n        members.forEach(async (m, index) => {\n            const _m = Members(user, m, restaurant, index)\n            \n            _membersList.push(_m)\n            if(m.username==user.username){\n                setIsRegistered(true)\n                //console.log('등록됨!')\n                setMenuList(m.menu.join(', '))\n                setMenuPrice(m.price)\n            }\n        })\n        setRestaurant({...restaurant, num_members: members.length})\n        setMembersList(_membersList)\n\n        setMember(members)\n        setRefreshing(false)\n    }\n\n    const sendMoney = async () => {\n        // Clipboard.setString(restaurant.account);\n        // alert('보내실 주소가 복사되었습니다.\\n카카오페이로 이동합니다.');\n        // Linking.openURL(restaurant.account)\n        //console.log('sendMoney')\n        //console.log(`${member.price + (restaurant.fee/restaurant.num_members)}`)\n\n        var numberSMS = [] // ['+821012345678', '+821012345678']\n\n\n        var stringSMS = ''\n        member.forEach(m => {\n            numberSMS.push(m.phone_number)\n\n            stringSMS += `${m.email.split('@')[0]}님이 주문하신 메뉴:${m.menu}, 입금하실 금액: ${m.price + (restaurant.fee/restaurant.num_members)}원\\n`\n        })\n        //console.log('numberSMS',numberSMS)\n\n\n        // SMS 발송 가능한 지 여부\n        const isAvailable = await SMS.isAvailableAsync();\n        if (isAvailable) {\n        // do your SMS stuff here\n            const { result } = await SMS.sendSMSAsync(\n            numberSMS,\n            `배달앤빵에서 알려드립니다.(이 메세지는 방장이 보낸 메세지입니다.)\\n${place.name}에 배달 될 음식점 \"${restaurant.name}\" 주문 정산 내용입니다.\\n\\n${stringSMS}\\n입금하실 곳: ${restaurant.account}`);\n            if(result == 'sent'){\n                Alert.alert('배달앤빵', '메세지 전송이 완료되었습니다.', [{text: '확인'}])\n            }\n            else{\n                // console.log('메세지 전송 실패')   \n            }\n\n        } else {\n        // misfortune... there's no SMS available on this device\n        }\n        \n\n\n        const CURRENT_ITEM = await DataStore.query(Restaurant, restaurant.id);\n        try{\n            await DataStore.save(Restaurant.copyOf(CURRENT_ITEM, updated => {\n             updated.isFinishRecruiting = true;   \n            }));\n            setIsFinishRecruiting(true);\n            // alert('모집 종료 했습니다.\\n이제 멤버들이 주문할 수 있도록 문자를 전송해주세요.')\n\n        }\n        catch(e){\n            // console.log(e)\n            alert(e)\n        }\n\n    }\n\n    \n\n    const makeNewMember = async () => {\n        const _isRegistered = await DataStore.query(Member, member => member.username(\"eq\", user.username).restaurantID(\"eq\", restaurant.id))\n        // console.log(_isRegistered)\n        if(_isRegistered.length == []){\n            await DataStore.save(\n                new Member({\n                    \"username\": user.username,\n                    \"email\": user.email,\n                    \"phone_number\": user.phone_number,\n                    \"menu\": [''], \n                    \"fee\":Number(0),\n                    \"restaurantID\": restaurant.id,\n                })\n            );\n\n            const CURRENT_ITEM = await DataStore.query(Restaurant, restaurant.id);\n            const updatedItem = await DataStore.save(Restaurant.copyOf(CURRENT_ITEM, updated => {\n            // Update the values on {item} variable to update DataStore entry\n            updated.num_members = updated.num_members +1;\n            }));\n            // console.log('새로운 멤버가 추가되었습니다.', updatedItem)\n            setRestaurant(updatedItem)\n            \n            // Alert.alert('배달앤빵','이제 메뉴를 추가해주세요', [{text: '확인'}])\n            setModalVisible(true);\n            // refreshRestaurantList(id=place.id);\n        }\n        else{\n            // alert('이미 추가되었으므로\\n메뉴 추가 페이지로 넘어갑니다.'\n            setModalVisible(true);\n        }\n    }\n\n    const deleteRestaurant = async () => {\n        if(user.username === restaurant.makerID){\n        // 소유자일때 가능\n            try {\n                const modelToDelete = await DataStore.query(Restaurant, restaurant.id);\n                DataStore.delete(modelToDelete);\n\n                const CURRENT_ITEM = await DataStore.query(Place, place.id);\n                await DataStore.save(Place.copyOf(CURRENT_ITEM, updated => {\n                // Update the values on {item} variable to update DataStore entry\n                updated.num_restaurants = updated.num_restaurants - 1;\n                }));\n\n                navigation.goBack();\n                // refreshRestaurantList(id=place.id);\n            } catch (error) {\n                // console.log(error)\n                alert(error)\n            }\n        }\n        else{\n            Alert.alert('배달앤빵','자신이 만든 모집이 아니라서 삭제할 수 없습니다.', [{text: '확인'}])\n        }\n    }\n\n    \n    \n    const addMenu = async () => {\n        // console.log('addMenu')\n\n        const _menuList = menuList.split('\\n');\n        // console.log('_menuList', _menuList)\n        // console.log('menuPrice', menuPrice)\n\n        const CURRENT_Member = await DataStore.query(Member, member => member.username(\"eq\", user.username).restaurantID(\"eq\", restaurant.id));\n        // console.log('current member', CURRENT_Member[0])\n        try {await DataStore.save(Member.copyOf(CURRENT_Member[0], updated => {\n            // Update the values on {item} variable to update DataStore entry\n            updated.menu = _menuList;\n            updated.price = menuPrice;\n        }));\n\n        if(restaurant.account === account||restaurant.fee === fee){\n            const CURRENT_RESTAURANT = await DataStore.query(Restaurant, restaurant.id);\n            await DataStore.save(Restaurant.copyOf(CURRENT_RESTAURANT, updated => {\n                // Update the values on {item} variable to update DataStore entry\n                updated.account = account;\n                updated.fee = fee;\n            }));\n        }\n\n        setModalVisible(false)}\n        catch (error) {\n            // console.log(error)\n        }\n    }\n\n    const [membersList, setMembersList] = useState([]);\n\n    const showAllMenu = () => {\n        // console.log(member)\n        const _allMenuList = []\n        member.forEach(member => {\n            member.menu.forEach(menu => {\n                _allMenuList.push(menu)\n            })\n        })\n        // console.log(_allMenuList)\n        Clipboard.setString(_allMenuList.join('\\n'))\n        Alert.alert('배달앤빵',`전체 메뉴가 복사되었습니다.\\n${_allMenuList.join('\\n')}`, [{text: '확인'}])\n    }\n\n    const restartRecruiting = async () =>{\n        const CURRENT_ITEM = await DataStore.query(Restaurant, restaurant.id);\n        try{\n            await DataStore.save(Restaurant.copyOf(CURRENT_ITEM, updated => {\n             updated.isFinishRecruiting = false;   \n            }));\n            setIsFinishRecruiting(false);\n            Alert.alert('배달앤빵','모집을 시작합니다.', [{text: '확인'}])\n\n        }\n        catch(e){\n            // console.log(e)\n            alert(e)\n        }\n    }\n\n    return (\n        <View style={styles.container}>\n\n        <Modal animationType='fade'\n        transparent={false}\n        visible={modalVisible}\n        onRequestClose={() => {\n          setModalVisible(false);\n        }}\n        >  \n            <KeyboardAvoidingView behavior='padding' keyboardVerticalOffset={height*50/2000}\n            style={styles.restaurantInfoModal}\n            >\n            <View style={[styles.header,{opacity:0.5}]}>\n                <Text style={[styles.highlightText]}>\n                    {isFinishRecruiting? `배달 모집 완료! ${restaurant.name}`:restaurant.name}\n                </Text>\n                <Text style={styles.highlightText}>\n                    {restaurant.num_members==0?`배달료 총 ${restaurant.fee}원`:`배달료: ${restaurant.fee}원 / ${restaurant.num_members}명 = ${Math.ceil(restaurant.fee/restaurant.num_members)}원`}\n                </Text>\n            </View>\n\n            <View style={styles.header}>\n            <Text style={styles.highlightText}>\n                {'모집 정보 수정\\n새롭게 주문하기'}\n            </Text>\n            </View>\n            <ScrollView>\n            <View style={styles.restaurantPageContainerModal}>\n            \n\n\n          <View style={{\n            flexDirection:'row',\n          }}>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_menu, styles.highlightText,{borderWidth:0, marginBottom:0}]}\n            editable={false}\n            placeholder={'송금 코드'}\n            placeholderTextColor={colorPack.text_dark}\n            ></TextInput>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_price, styles.normalText,{borderWidth:0, marginBottom:0}]}\n            editable={false}\n            placeholder={'배달료(원)'}\n            placeholderTextColor={colorPack.text_dark}\n            ></TextInput>\n\n          </View>\n\n\n          <View style={{\n            flexDirection:'row',\n            alignItems:'center',\n          }}>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_menu, styles.normalText, {textAlign:'left'}]}\n            defaultValue={account}\n            onChangeText={(text) => {\n                if(text){\n                    setAccount(text)\n                }\n                else{\n                    setAccount(restaurant.account)\n                }\n            }}\n            ></TextInput>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_price, styles.normalText,]}\n            defaultValue={`${fee}`}\n            placeholderTextColor={colorPack.deactivated}\n            keyboardType='numeric'\n            onChangeText={(text)=>{\n                if(text){\n                    setFee(parseInt(text))\n                }\n                else{\n                    setFee(restaurant.fee)\n                }            \n            }}\n\n            ></TextInput>\n\n            </View>\n\n\n\n          <View style={{\n            flexDirection:'row',\n          }}>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_menu, styles.highlightText,{borderWidth:0, marginBottom:0}]}\n            editable={false}\n            placeholder={'주문 메뉴'}\n            placeholderTextColor={colorPack.text_dark}\n            ></TextInput>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_price, styles.normalText,{borderWidth:0, marginBottom:0}]}\n            editable={false}\n            numberOfLines={2}\n            placeholder={'가격(원)'}\n            placeholderTextColor={colorPack.text_dark}\n            ></TextInput>\n\n          </View>\n\n          <View style={{\n            flexDirection:'row',\n            alignItems:'center',\n          }}>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_menu, styles.normalText, {textAlign:'left'}]}\n            multiline={true}\n            placeholder={'주문할 메뉴를 입력해주세요.\\n이때 한 줄에 \\n하나의 메뉴를 입력해 주세요.\\n해당 내용을 통해 방장이\\n자동으로 주문할 수 있습니다.'}\n            placeholderTextColor={colorPack.deactivated}\n            onChangeText={(text) => {setMenuList(text)}}\n            defaultValue={menuList}\n            ></TextInput>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_price, styles.normalText,]}\n            placeholder={'배달료 제외'}\n            placeholderTextColor={colorPack.deactivated}\n            keyboardType='numeric'\n            onChangeText={(text)=>{setMenuPrice(parseInt(text))}}\n            ></TextInput>\n\n        </View>\n\n\n          <View style={{flexDirection:'row', marginVertical:height*100/2000}}>\n          \n          <TouchableOpacity\n          style = {styles.modalButton}\n          onPress={()=>\n            \n            {setModalVisible(false);}}\n\n          >\n          <Text style={styles.highlightText}>\n          {'닫기'}\n          </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n          style = {styles.modalButton}\n          onPress={()=>{\n                if(menuList && menuPrice){\n                    \n                    addMenu();\n                }\n                else{\n                    Alert.alert('배달앤빵','메뉴 또는 가격이 입력되지 않았습니다.',[{text: '확인'}])\n                }\n            }}\n            >\n          <Text style={styles.highlightText}>\n          {'메뉴 추가 완료'}\n          </Text>\n            </TouchableOpacity>\n\n          </View>\n          \n          \n          </View>\n\n          </ScrollView>\n          </KeyboardAvoidingView>\n            \n        </Modal>\n\n\n\n\n            <View style={styles.header}>\n                <Text style={styles.highlightText}>\n                    {isFinishRecruiting? `배달 모집 완료! ${restaurant.name}`:restaurant.name}\n                </Text>\n                <Text style={styles.highlightText}>\n                    {restaurant.num_members==0?`배달료 총 ${restaurant.fee}원`:`배달료: ${restaurant.fee}원 / ${restaurant.num_members}명 = ${Math.ceil(restaurant.fee/restaurant.num_members)}원`}\n                </Text>\n            </View>\n\n\n            <View style={styles.restaurantButtonContainer}>\n                <TouchableOpacity style={styles.restaurantButton_1}\n                onPress={() => {\n                    Linking.openURL(restaurant.url);\n                }}\n                >\n                    <Text style={styles.normalText}>\n                        {'배민\\n바로가기'}\n                    </Text>\n                </TouchableOpacity>\n\n                \n                <TouchableOpacity style={styles.restaurantButton_2}\n                    onPress={() => {\n                        if(!isFinishRecruiting){\n                            makeNewMember()\n                        }\n                        else{\n                            showAllMenu();\n                        }\n                    }\n                    }\n                >\n                    <Text style={styles.normalText}>\n                        {!isFinishRecruiting?'주문또는\\n정보수정':'전체주문\\n확인'}\n                    </Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity style={styles.restaurantButton_1}\n                onPress={()=>{\n                    sendMoney();\n                    \n                }}\n                >\n                    <Text style={styles.normalText}>\n                        {!isFinishRecruiting?'모집종료\\n송금요청':'전체문자\\n보내기'}\n                    </Text>\n                </TouchableOpacity>\n\n\n                <TouchableOpacity style={styles.restaurantButton_2}\n                onPressOut={() => {\n                    if(isFinishRecruiting){\n                        restartRecruiting()\n                    }    \n                    else{\n                        deleteRestaurant()                        \n                    }\n                }\n                }\n                \n                >\n                    <Text style={styles.normalText}>\n                        {!isFinishRecruiting?'모집취소':'다시\\n모집하기'}\n                    </Text>\n                </TouchableOpacity>\n\n            </View>\n\n\n            <View style={styles.map} >\n              <MapView\n              provider={PROVIDER_GOOGLE}\n              customMapStyle={map_darkStyle}\n              style={styles.map}\n              initialRegion={{longitude: place.longitude, latitude: place.latitude, latitudeDelta: 0.003, longitudeDelta: 0.003}}\n              showsMyLocationButton={false}\n              showsUserLocation={true}\n              loadingEnabled={true}\n              zoomEnabled={true}\n              rotateEnabled={true}\n              >\n                <Marker\n                    coordinate={{longitude: place.longitude, latitude: place.latitude}}\n                    title={place.name}\n                    description={`${place.num_restaurants}개의 레스토랑`}\n                    key={place.id}\n                />\n              </MapView>\n            \n            </View>\n            \n            <ScrollView style={styles.restaurantListContainer}\n            refreshControl={\n              <RefreshControl\n                refreshing={refreshing}\n                onRefresh={()=>{\n                  getMembers();\n                }\n                }\n              />\n              }\n            >\n            {membersList}\n            </ScrollView>\n        </View>\n\n    );\n}\n\n\n\nfunction Members(user, member, restaurant, index){\n\n    // console.log('Members', user, member, restaurant, index)\n\n\n\n        const backgroundColor_odd = colorPack.highlight_dark\n        const backgroundColor_even = colorPack.highlight_light\n        var myBackgroundColor\n        if(Number(index) %2 == 0){\n            myBackgroundColor = backgroundColor_even\n        }\n        else{\n            myBackgroundColor = backgroundColor_odd\n        }\n\n        const sendSMS = async() => {\n            const isAvailable = await SMS.isAvailableAsync();\n        if (isAvailable) {\n        // do your SMS stuff here\n            const { result } = await SMS.sendSMSAsync(\n            member.phone_number,\n            `배달앤빵에서 알려드립니다.\\n${restaurant.name}으로 주문하신 메뉴(${member.menu.toString()})를 주문하기 위해 아래 링크로 ${member.price + (restaurant.fee/restaurant.num_members)} 원을 송금해주세요.\\n입금하실 곳: ${restaurant.account}`);\n            if(result == 'sent'){\n                Alert.alert('배달앤빵','메세지 전송이 완료되었습니다.',[{text:'확인'}])\n            }\n            else{\n                // console.log('SMS 전송 실패')\n                alert('메세지 전송에 실패하였습니다.')\n            }\n\n        } else {\n        // misfortune... there's no SMS available on this device\n        }}\n        return(\n            \n            <TouchableOpacity style={[styles.restaurantList,{backgroundColor:myBackgroundColor}]} key={member.id}\n            disabled={true}\n            >\n                <TouchableOpacity\n                onPress={\n                    ()=>{\n                        sendSMS();                 \n                    }\n                }\n                disabled={member.username === user.username}\n                >              \n                <Text style={[styles.highlightText, styles.restaurantFee]}\n                ellipsizeMode='tail'\n                numberOfLines={1}\n                >{member.email.split('@')[0]}\n                </Text>\n                <Text style={[styles.normalText, styles.restaurantFee]}\n                ellipsizeMode='tail'\n                numberOfLines={1}\n                >{(member.username===user.username)?'나의 주문':'개별 문자전송'}\n                </Text>\n                </TouchableOpacity>\n    \n                <TouchableOpacity \n                onPress={()=>{\n                    Alert.alert(`${member.email.split('@')[0]}님이 주문하신 메뉴`,`${member.menu}\\n음식값: ${member.price}원, 배달료: ${restaurant.fee/restaurant.num_members}원`, [{text:'닫기'}])\n                }}\n                >\n                <Text style={[styles.normalText,styles.restaurantName]}>{`${member.menu[0]} 등 ${member.menu.length}개`}</Text>\n                </TouchableOpacity>\n        \n                <Text style={[styles.normalText, styles.restaurantMembers]}>{Math.ceil(member.price + (restaurant.fee/restaurant.num_members))+'원'}</Text>\n    \n            </TouchableOpacity>\n\n        )\n    }","import {View, Text, TouchableOpacity, ScrollView, Modal, TextInput, RefreshControl,SafeAreaView, Alert, KeyboardAvoidingView} from 'react-native-web';\nimport {useState, useEffect} from 'react';\nimport  {DataStore} from '@aws-amplify/datastore';\nimport {Restaurant, Member,} from '../models';\nimport { styles, colorPack,  height, map_darkStyle } from '../style/style';\nimport MapView, { Marker, PROVIDER_GOOGLE } from 'react-native-web-maps';\nimport * as Linking from 'expo-linking';\n\nexport default function Restaurant_page_guest({route, navigation}){\n    \n    // console.log('Restaurant_page_guest', route);\n\n    const user = route.params.user;//{username: 'test', email: ''}\n    const [restaurant, setRestaurant] = useState(route.params.restaurant);//{makerID: 'test', name: '', fee: 0, num_members: 0, menu: [], isFinishRecruiting: false}\n    const place = route.params.place;//{name: '', latitude: 0, longitude: 0}\n    \n\n    const [modalVisible, setModalVisible] = useState(false);\n    const [menuList, setMenuList] = useState('메뉴를 먼저 추가해주세요');\n    const [menuPrice, setMenuPrice] = useState(0);\n    const [isRegistered, setIsRegistered] = useState(false);\n\n    const[refreshing, setRefreshing] = useState(false);\n    \n    useEffect(() => {\n        getMembers(); // get member from database\n        // console.log('user', user)\n        // console.log('member', member)\n        // console.log('restaurant', restaurant)\n        // console.log('place', place)\n    }, [isRegistered, modalVisible]);\n    \n    const getMembers = async () => {\n        setRefreshing(true);\n\n        const members = await DataStore.query(Member, member=>member.restaurantID('eq', restaurant.id));\n        // console.log('members', members)\n        const _membersList = []\n        members.forEach(async (m, index) => {\n            const _m = Members(user, m, restaurant, index)\n            \n            _membersList.push(_m)\n            if(m.username==user.username){\n                setIsRegistered(true)\n                // console.log('등록됨!')\n                setMenuList(m.menu.join(', '))\n                setMenuPrice(m.price)\n            }\n        })\n        setRestaurant({...restaurant, num_members: members.length})\n        setMembersList(_membersList)\n        setRefreshing(false)\n\n    }\n\n    const makeNewMember = async () => {\n        const _isRegistered = await DataStore.query(Member, member => member.username(\"eq\", user.username).restaurantID(\"eq\", restaurant.id))\n        // console.log(_isRegistered)\n        setIsRegistered(_isRegistered.length>0)\n        if(!isRegistered){\n            await DataStore.save(\n                new Member({\n                    \"username\": user.username,\n                    \"email\": user.email,\n                    \"phone_number\": user.phone_number,\n                    \"menu\": ['메뉴를 먼저 추가해주세요'], \n                    \"fee\":Number(0),\n                    \"restaurantID\": restaurant.id,\n                })\n            );\n\n            const CURRENT_ITEM = await DataStore.query(Restaurant, restaurant.id);\n            const updatedItem = await DataStore.save(Restaurant.copyOf(CURRENT_ITEM, updated => {\n                // Update the values on {item} variable to update DataStore entry\n                updated.num_members = updated.num_members +1;\n                }));\n            // console.log('새로운 멤버가 추가되었습니다.', updatedItem)\n            setRestaurant(updatedItem)\n\n            setModalVisible(true);\n            // refreshRestaurantList(id=place.id);\n        }\n        else{\n            // Alert.alert('배달앤빵','이미 등록되었습니다.',[{text:'메뉴추가', onPress:()=>{setModalVisible(true)}},{text:'닫기', onPress:()=>{}}])\n            setModalVisible(true);\n        }\n    }\n\n    const deleteMember = async () => {\n        if(user.username !== restaurant.makerID){\n        // 소유자이면 자기를 멤버에서 빼는 것 불가\n            try {\n                const _member = await DataStore.delete(Member, member => member.username(\"eq\", user.username).restaurantID(\"eq\", restaurant.id)); // delete member\n                \n                // console.log('memberLength', _member.length)\n                if(_member.length>0){ // 현재 등록이 되어 있는 상태라면\n                    const CURRENT_ITEM = await DataStore.query(Restaurant, restaurant.id);\n                    // console.log('CURRENT_ITEM', CURRENT_ITEM)\n                    await DataStore.save(Restaurant.copyOf(CURRENT_ITEM, updated => {\n                    // Update the values on {item} variable to update DataStore entry\n                    updated.num_members -= 1; ;\n                    }));\n                    navigation.goBack();\n                    // refreshRestaurantList(id=restaurant.placeID);\n                    setIsRegistered(false);\n                }\n                else{\n                    Alert.alert('배달앤빵','등록되지 않은 음식점입니다.',[{text:'닫기'}])\n                }\n            } catch (error) {\n                // console.log(error)\n                if(error.code === 'ConcurrentModificationException'){\n                    Alert.alert('배달앤빵','자신이 속한 가게가 아닙니다.',[{text:'닫기'}])\n                }\n                else if(error.code === 'NotFoundException'){\n                    Alert.alert('배달앤빵','자신이 속한 가게가 아닙니다.',[{text:'닫기'}])\n                }\n                else{\n                    // console.log('에러가 뭔지 모르겠어요')\n                    alert('에러가 뭔지 모르겠어요')\n                }\n            }\n        }\n        else{\n            Alert.alert('배달앤빵','자신이 만든 모집은 삭제할 수 없습니다.',[{text:'확인'}])\n        }\n    }\n\n    const addMenu = async () => { // 기존에 등록되어 있을 때 메뉴 수정 및 추가\n        // console.log('addMenu')\n\n        const _menuList = menuList.split('\\n');\n        // console.log('_menuList', _menuList)\n        // console.log('menuPrice', menuPrice)\n\n        const CURRENT_Member = await DataStore.query(Member, member => member.username(\"eq\", user.username).restaurantID(\"eq\", restaurant.id));\n        // console.log('current member', CURRENT_Member[0])\n        try {await DataStore.save(Member.copyOf(CURRENT_Member[0], updated => {\n            // Update the values on {item} variable to update DataStore entry\n            updated.menu = _menuList;\n            updated.price = menuPrice;\n        }));\n\n        setModalVisible(false)}\n        catch (error) {\n            // console.log(error)\n        }\n    }\n\n    const [membersList, setMembersList] = useState(\n        [\n            \n        ]\n    );\n\n    return (\n        <View style={styles.container}>\n\n        <Modal animationType='fade'\n        transparent={false}\n        visible={modalVisible}\n        onRequestClose={() => {\n          setModalVisible(false);\n        }}\n        >\n            <KeyboardAvoidingView behavior='padding' keyboardVerticalOffset={height*50/2000}\n            style={styles.restaurantInfoModal}>\n\n            <View style={[styles.header,{opacity:0.5}]}>\n                <Text style={styles.highlightText}>\n                    {restaurant.name}\n                </Text>\n                <Text style={styles.highlightText}>\n                    {restaurant.num_members==0?`배달료 총 ${restaurant.fee}원`:`배달료: ${restaurant.fee}원 / ${restaurant.num_members}명 = ${Math.ceil(restaurant.fee/restaurant.num_members)}원`}\n                </Text>\n            </View>\n            \n            <View style={styles.header}>\n            <Text style={styles.highlightText}>\n                {'새롭게 주문하기'}\n            </Text>\n            </View>\n\n\n            <ScrollView>\n            <View style={styles.restaurantPageContainerModal}>\n\n\n          <View style={{\n            flexDirection:'row',\n          }}>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_menu, styles.highlightText,{borderWidth:0}]}\n            editable={false}\n            placeholder={'주문 메뉴'}\n            placeholderTextColor={colorPack.text_dark}\n            ></TextInput>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_price, styles.normalText,{borderWidth:0}]}\n            editable={false}\n            placeholder={'가격(원)'}\n            numberOfLines={2}\n            placeholderTextColor={colorPack.text_dark}\n            ></TextInput>\n\n          </View>\n\n          <View style={{\n            flexDirection:'row',\n            alignItems:'center',\n          }}>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_menu, styles.normalText, {textAlign:'left'}]}\n            multiline={true}\n\n            placeholder={'주문할 메뉴를 입력해주세요.\\n이때 한 줄에 \\n하나의 메뉴를 입력해 주세요.\\n해당 내용을 통해 방장이\\n자동으로 주문할 수 있습니다.'}\n            placeholderTextColor={colorPack.deactivated}\n            onChangeText={(text) => {setMenuList(text)}}\n            ></TextInput>\n\n            <TextInput \n            style={[styles.textInputBox_restaurant_price, styles.normalText,]}\n            placeholderTextColor={colorPack.deactivated}\n            keyboardType='numeric'\n            onChangeText={(text)=>{\n                setMenuPrice(parseInt(text))\n            }}\n            placeholder={'배달료 제외'}\n            ></TextInput>\n\n        </View>\n\n\n          <View style={{flexDirection:'row', marginVertical:height*100/2000}}>\n          \n          <TouchableOpacity\n          style = {styles.modalButton}\n          onPress={()=>\n            \n            {setModalVisible(false);}}\n\n          >\n          <Text style={styles.highlightText}>\n          {'닫기'}\n          </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n          style = {styles.modalButton}\n          onPress={()=>{\n                if(menuList && menuPrice){\n                    \n                    addMenu();\n                }\n                else{\n                    Alert.alert('배달앤빵','메뉴 또는 가격이 입력되지 않았습니다.',[{text: '확인'}])\n                }\n            }}\n            >\n          <Text style={styles.highlightText}>\n          {'메뉴 추가 완료'}\n          </Text>\n            </TouchableOpacity>\n\n          </View>\n          \n          \n          </View>\n\n          </ScrollView>\n          </KeyboardAvoidingView>\n        </Modal>\n\n\n\n\n            <View style={styles.header}>\n                <Text style={styles.highlightText}>\n                    {restaurant.name}\n                </Text>\n                <Text style={styles.highlightText}>\n                    {restaurant.num_members==0?`배달료 총 ${restaurant.fee}원`:`배달료: ${restaurant.fee}원 / ${restaurant.num_members}명 = ${Math.ceil(restaurant.fee/restaurant.num_members)}원`}\n                </Text>\n            </View>\n\n\n            <View style={styles.restaurantButtonContainer}>\n                <TouchableOpacity style={styles.restaurantButton_1}\n                onPress={() => {\n                    Linking.openURL(restaurant.url);\n                }}\n                >\n                    <Text style={styles.normalText}>\n                        {'배민\\n바로가기'}\n                    </Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity style={styles.restaurantButton_2}\n                    onPress={() => makeNewMember()}\n                >\n                    <Text style={styles.normalText}>\n                        {(isRegistered)?'메뉴 변경':'주문하기'}\n                    </Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity style={styles.restaurantButton_1}\n                disabled={true}\n                >\n                    <Text style={(styles.deactivatedText)}>\n                        {'모집종료 후\\n입금가능'}\n                    </Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity style={styles.restaurantButton_2}\n                onPressOut={() => deleteMember()}\n                disabled={!isRegistered}\n                >\n                <Text style={(!isRegistered)?(styles.deactivatedText):(styles.normalText)}>\n                    {'주문취소'}\n                </Text>\n                </TouchableOpacity>\n\n            </View>\n\n\n            <View style={styles.mapContainer} >\n              <MapView\n              provider={PROVIDER_GOOGLE}\n              customMapStyle={map_darkStyle}\n              style={styles.map}\n              initialRegion={{longitude: place.longitude, latitude: place.latitude, latitudeDelta: 0.003, longitudeDelta: 0.003}}\n              showsMyLocationButton={false}\n              showsUserLocation={true}\n              loadingEnabled={true}\n              zoomEnabled={true}\n              rotateEnabled={true}\n              >\n                <Marker\n                    coordinate={{longitude: place.longitude, latitude: place.latitude}}\n                    title={place.name}\n                    description={`${place.num_restaurants}개의 레스토랑`}\n                    key={place.id}\n                />\n              </MapView>\n            \n            </View>\n            <SafeAreaView>\n\n            <ScrollView style={styles.restaurantListContainer}\n            refreshControl={\n              <RefreshControl\n                refreshing={refreshing}\n                onRefresh={()=>{\n                  getMembers();\n                }\n                }\n              />\n              }\n            >\n              \n            {membersList}\n            </ScrollView>\n            </SafeAreaView>\n        </View>\n\n    );\n}\n\n\nfunction Members(user, member, restaurant, index){\n\n//    console.log('Members', user, member, restaurant, index)\n\n    const backgroundColor_odd = colorPack.highlight_dark\n    const backgroundColor_even = colorPack.highlight_light\n    var myBackgroundColor\n    if(Number(index) %2 == 0){\n        myBackgroundColor = backgroundColor_even\n    }\n    else{\n        myBackgroundColor = backgroundColor_odd\n    }\n    return(\n        \n        <TouchableOpacity style={[styles.restaurantList,{backgroundColor:myBackgroundColor}]} key={member.id}\n        disabled={true}\n        >\n\n            <Text style={[styles.highlightText, styles.restaurantFee]}\n            ellipsizeMode='tail'\n            numberOfLines={1}\n            >{member.username===user.username?'나의 주문':member.email.split('@')[0]}\n            </Text>\n\n            <TouchableOpacity \n            onPress={()=>{\n                Alert.alert(`${member.email.split('@')[0]}님이 주문하신 메뉴`,`${member.menu}\\n음식값: ${member.price}원, 배달료: ${restaurant.fee/restaurant.num_members}원`, [{text:'닫기'}])\n            }}\n            >\n            <Text style={[styles.normalText,styles.restaurantName]}>{`${member.menu[0]} 등 ${member.menu.length}개`}</Text>\n            </TouchableOpacity>\n\n\n            <Text style={[styles.normalText, styles.restaurantMembers]}>{Math.ceil(member.price + (restaurant.fee/restaurant.num_members))+'원'}</Text>\n\n        </TouchableOpacity>\n    )\n}","import {View, Text, TouchableOpacity, ScrollView, Alert} from 'react-native-web';\nimport {useState, useEffect} from 'react';\nimport  {DataStore} from '@aws-amplify/datastore';\nimport { Member,} from '../models';\nimport { styles, colorPack, map_darkStyle } from '../style/style';\nimport MapView, { Marker, PROVIDER_GOOGLE } from 'react-native-web-maps';\nimport * as Linking from 'expo-linking';\nimport * as Clipboard from 'expo-clipboard'\nimport { sendSMSAsync } from 'expo-sms';\n\nexport default function Restaurant_page_finished({route, navigation}){\n    \n\n    const [member, setMember] = useState(null);\n    const [isRegistered, setIsRegistered] = useState(false);\n\n    const user = route.params.user;//{username: 'test', email: ''}\n    const restaurant = route.params.restaurant;//{makerID: 'test', name: '', fee: 0, num_members: 0, menu: [], isFinishRecruiting: false}\n    const place = route.params.place;//{name: '', latitude: 0, longitude: 0}\n\n\n    useEffect(() => {\n        getMembers(); // get member from database\n        // console.log('user', user)\n        // console.log('member', member)\n        // console.log('restaurant', restaurant)\n        // console.log('place', place)\n    }, []);\n    \n    const getMembers = async () => {\n        const members = await DataStore.query(Member, member=>member.restaurantID('eq', restaurant.id));\n\n        const _membersList = []\n        members.forEach(async (m, index) => {\n            const _m = Members(user, m, restaurant, index)\n\n            _membersList.push(_m)\n            if(m.username==user.username){\n                setIsRegistered(true)\n                // console.log('등록됨!')\n            }\n            // console.log(m)\n        })\n        setMembersList(_membersList)\n\n        setMember(members)\n        // console.log('isRegistered', isRegistered);\n    }\n    const sendMoney = async() => {\n        Clipboard.setString(`${estaurant.account}`);\n\n        const reg = /^(https:\\/\\/qr.kakaopay.com\\/)(.*)+$/;\n        \n        if (reg.test(restaurant.account)===true){\n            Alert.alert('배달앤빵','보내실 주소가 복사되었습니다.', [{text: '카카오페이로 이동', onPress: () => {\n                Linking.openURL(`${restaurant.account}`);\n            }}, {text: '닫기'}]);\n        }\n        else{\n            Alert.alert('배달앤빵','보내실 주소가 복사되었습니다.', [{text: '닫기'}]);\n        }\n    }\n\n    const sendSMStoAuthor = async() => {\n        \n        \n        const makerPhoneNumber = member.filter(member => member.username == restaurant.makerID)[0].phone_number;\n\n        // console.log(makerPhoneNumber)\n        sendSMSAsync(makerPhoneNumber, `배달앤빵 주문자: ${user.email.split('@')[0]} 주문한 음식점: ${restaurant.name}\\n`)\n        \n    }\n    const [membersList, setMembersList] = useState(\n        [\n            \n        ]\n    );\n\n    return (\n        <View style={styles.container}>\n\n        \n            <View style={styles.header}>\n                <Text style={styles.highlightText}>\n                    {`배달 모집 완료! ${restaurant.name}`}\n                </Text>\n                <Text style={styles.highlightText}>\n                    {restaurant.num_members==0?`배달료 총 ${restaurant.fee}원`:`배달료: ${restaurant.fee}원 / ${restaurant.num_members}명 = ${Math.ceil(restaurant.fee/restaurant.num_members)}원`}\n                </Text>\n            </View>\n\n\n\n            <View style={styles.restaurantButtonContainer}>\n                <TouchableOpacity style={styles.restaurantButton_1}\n                onPress={() => {\n                    Linking.openURL(restaurant.url);\n                }}\n                disabled={!isRegistered}\n                >\n                    <Text style={(isRegistered)?styles.normalText:styles.deactivated}>\n                        {'배민\\n바로가기'}\n                    </Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity style={styles.restaurantButton_2}\n                    onPress={() => {\n                        Alert.alert('배달앤빵','준비중입니다.', [{text: '닫기'}]);\n                    }}\n                >\n                    <Text style={(isRegistered)?styles.normalText:styles.deactivated}>\n                        {'나의주문\\n메뉴보기'}\n                    </Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity style={styles.restaurantButton_1}\n                onPress={()=>sendMoney()}\n                disabled={!isRegistered}\n                >\n                    <Text style={(isRegistered)?styles.normalText:styles.deactivated}>\n                        {'송금하러\\n가기'}\n                    </Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity style={styles.restaurantButton_2}\n                    onPress={() => {\n                        sendSMStoAuthor()}}\n                        disabled={!isRegistered}\n                >\n                    <Text style={(isRegistered)?styles.normalText:styles.deactivated}>\n                        {'주문자에게\\n문자보내기'}\n                    </Text>\n                </TouchableOpacity>\n\n            </View>\n\n\n            <View style={styles.mapContainer} >\n              <MapView\n              provider={PROVIDER_GOOGLE}\n              customMapStyle={map_darkStyle}\n              style={styles.map}\n              initialRegion={{longitude: place.longitude, latitude: place.latitude, latitudeDelta: 0.003, longitudeDelta: 0.003}}\n              showsMyLocationButton={false}\n              showsUserLocation={true}\n              loadingEnabled={true}\n              zoomEnabled={true}\n              rotateEnabled={true}\n              >\n                <Marker\n                    coordinate={{longitude: place.longitude, latitude: place.latitude}}\n                    title={place.name}\n                    description={`${place.num_restaurants}개의 레스토랑`}\n                    key={place.id}\n                />\n              </MapView>\n            \n            </View>\n            \n            <ScrollView style={styles.restaurantListContainer}>\n            {membersList}\n            </ScrollView>\n        </View>\n\n    );\n}\n\n\nfunction Members(user, member, restaurant, index){\n\n//    console.log('Members', user, member, restaurant, index)\n\n    const backgroundColor_odd = colorPack.highlight_dark\n    const backgroundColor_even = colorPack.highlight_light\n    var myBackgroundColor\n    if(Number(index) %2 == 0){\n        myBackgroundColor = backgroundColor_even\n    }\n    else{\n        myBackgroundColor = backgroundColor_odd\n    }\n    return(\n        \n        <TouchableOpacity style={[styles.restaurantList,{backgroundColor:myBackgroundColor}]} key={member.id}\n        disabled={true}\n        >\n\n            <Text style={[styles.highlightText, styles.restaurantFee]}\n            ellipsizeMode='tail'\n            numberOfLines={1}\n            >{member.username===user.username?'나의 주문':member.email.split('@')[0]}\n            </Text>\n\n            <TouchableOpacity \n            onPress={()=>{\n                Alert.alert(`${member.email.split('@')[0]}님이 주문하신 메뉴`,`${member.menu}\\n음식값: ${member.price}원, 배달료: ${restaurant.fee/restaurant.num_members}원`, [{text:'닫기'}])\n            }}\n            >\n            <Text style={[styles.normalText,styles.restaurantName]}>{`${member.menu[0]} 등 ${member.menu.length}개`}</Text>\n            </TouchableOpacity>\n\n\n            <Text style={[styles.normalText, styles.restaurantMembers]}>{Math.ceil(member.price + (restaurant.fee/restaurant.num_members))+'원'}</Text>\n\n        </TouchableOpacity>\n    )\n}","import Restaurant_page_auth from './restaurant_auth';\nimport Restaurant_page_guest from './restaurant_guest';\nimport Restaurant_page_finished from './restaurant_finished';\n\nexport default function Restaurant_page({route, navigation}){\n    // console.log('makerID', route.params.restaurant.makerID)\n    // console.log('username', route.params.user.username)\n    if(route.params.restaurant.makerID === route.params.user.username){\n        return (\n            <Restaurant_page_auth route={route} navigation={navigation}/>\n            );\n    }\n    else{\n        if(route.params.restaurant.isFinishRecruiting){\n            return (\n                <Restaurant_page_finished route={route} navigation={navigation}/>\n                );\n        }\n        else{\n            return (\n                <Restaurant_page_guest route={route} navigation={navigation}/>\n                );        \n        }\n    }\n    \n}\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"ap-northeast-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://ysltbnsuyjattbcqeuoky7tuju.appsync-api.ap-northeast-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"ap-northeast-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-2ttnq2wrqvhu7p4uzqjh5xzc5q\",\n    \"aws_cognito_identity_pool_id\": \"ap-northeast-2:b1c44662-2457-46c9-be56-d80aad8ffc70\",\n    \"aws_cognito_region\": \"ap-northeast-2\",\n    \"aws_user_pools_id\": \"ap-northeast-2_CoDHy1kgY\",\n    \"aws_user_pools_web_client_id\": \"4qkhs8nusdpd1vl735eckovthq\",\n    \"oauth\": {},\n    \"aws_cognito_username_attributes\": [\n        \"EMAIL\"\n    ],\n    \"aws_cognito_social_providers\": [],\n    \"aws_cognito_signup_attributes\": [],\n    \"aws_cognito_mfa_configuration\": \"OFF\",\n    \"aws_cognito_mfa_types\": [\n        \"SMS\"\n    ],\n    \"aws_cognito_password_protection_settings\": {\n        \"passwordPolicyMinLength\": 6,\n        \"passwordPolicyCharacters\": [\n            \"REQUIRES_LOWERCASE\",\n            \"REQUIRES_NUMBERS\"\n        ]\n    },\n    \"aws_cognito_verification_mechanisms\": [\n        \"EMAIL\"\n    ],\n    \"aws_user_files_s3_bucket\": \"bts-storage-9a68b86a201022-dev\",\n    \"aws_user_files_s3_bucket_region\": \"ap-northeast-2\",\n    \"aws_mobile_analytics_app_id\": \"804a9c1dd42c4de3b781664b962de97e\",\n    \"aws_mobile_analytics_app_region\": \"ap-northeast-2\"\n};\n\n\nexport default awsmobile;\n","import Main_page from './src/screen/main';\nimport SignUp_page from './src/screen/signup';\nimport SignIn_page from './src/screen/signin';\nimport Restaurant_page from './src/screen/restaurant';\nimport { Amplify } from 'aws-amplify';\nimport awsconfig from './src/aws-exports';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport 'react-native-gesture-handler';\nimport {useFonts} from 'expo-font'\nimport Loading_page from './src/screen/loading_page';\n\n\n\n\nAmplify.configure(awsconfig);\n\nconst Stack = createStackNavigator();\n\nexport default function App(){\n  \n  let [fontLoaded] = useFonts({\n    'happy_sans_bold': require('./assets/font/Happiness-Sans-Bold.ttf'),\n    'happy_sans_regular': require('./assets/font/Happiness-Sans-Regular.ttf'),\n    'happy_sans_title': require('./assets/font/Happiness-Sans-Title.ttf'),\n  });\n\n  // const [fontLoaded, setFontLoaded] = useState(false);\n  // async function loadFonts() {\n  //   await Font.loadAsync({\n  //     'happy_sans_bold': require('./assets/font/Happiness-Sans-Bold.ttf'),\n  //     'happy_sans_regular': require('./assets/font/Happiness-Sans-Regular.ttf'),\n  //     'happy_sans_title': require('./assets/font/Happiness-Sans-Title.ttf'),    \n  //   });\n  //   setFontLoaded(true);\n  // }\n  // useEffect(() => {\n  //   loadFonts();\n  // }\n  // , []);\n\n\n  // console.log('App.js user', user);\n\n\n    return (\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName={\"SignIn\"}>\n          <Stack.Screen name=\"Main\" component={Main_page} \n          options={{\n            headerShown: false,\n          }}\n          />\n          <Stack.Screen name=\"Restaurant\" component={Restaurant_page} \n          options={{\n            headerShown: false,\n          }}\n          />\n          <Stack.Screen name=\"SignIn\" component={SignIn_page} \n          options={{\n            headerShown: false,\n          }}\n          />\n          <Stack.Screen name=\"SignUp\" component={SignUp_page}\n          options={{\n            headerShown: false,\n          }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n\n    );  \n}","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}